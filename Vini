echo "The Vini in silico model of cancer is supercomputing application for perfo##rming multi-drug pathway based virtual drug screening."
echo "If using this program in your academic research , please cite:"                                                   #
echo " Tomic D., Skala K., Kranjcevic L., Pirkic B., Stifter S., et al. (2018) Evaluation of the Efficacy of Cancer Drugs by Using the Second Largest Eigenvalue of Metabolic Cancer Pathways. J Comput Sci Syst Biol 11: 240-248. doi:10.4172/jcsb.1000280"
echo ; sleep 1

vini_dir=`pwd` ; export vini_dir

> Vini.crashlog
> $vini_dir/globals
chmod u+x $vini_dir/globals
NULL=0 ; ONES=1 ; TWO=2 ; THREE=3 ; SEVEN=7 ; TRUE=1 ; FALSE=0
echo "export TRUE=$TRUE"                   >> $vini_dir/globals
echo "export FALSE=$FALSE"                 >> $vini_dir/globals
echo "export NULL=$NULL"                   >> $vini_dir/globals
echo "export ONES=$ONES"                   >> $vini_dir/globals
echo "export TWO=$TWO"                     >> $vini_dir/globals
echo "export THREE=$THREE"                 >> $vini_dir/globals
echo "export SEVEN=$SEVEN"                 >> $vini_dir/globals

echo -n "Checking for user..." 
if [[ $HOME == "/root" ]]
then
    echo "Please run Vini as an ordinary user, not as a root! Exiting..."
    exit
else
    echo passed.
fi

echo -n "Checking for the installation of the 3rd party software..."
if  [ -e sourceme ]
then
    source $vini_dir/sourceme
    echo "The following software is installed:" 
    programs=`grep section sourceme | wc -l`
    NOPROGS=13   #the number of 3rd programs Vini is using
    if  [ $programs -lt $NOPROGS ]
    then
        echo "Some 3rd party programs are missing. Trying to install them."
        sh install.sh
        echo "Installation is finished. Log in and start Vini again."
        exit
    else
        echo "All required programs are in place, continuing."
    fi
else
    sh install.sh
    echo "Installation is finished. Re-login and start Vini again."
    pkill -u $USER
fi

sh $vini_dir/clean
rm -f $WORKDIR/dockidlist* $WORKDIR/slemidlist* $WORKDIR/SLEM*

echo -n "Checking for the ligands_list file..."
if [ -e $vini_dir/ligands/ligands_list ]
then
    echo passed.
else
    echo "you must provide ligand list. Exiting." ; exit
fi

mkdir -p $vini_dir/ligands/pdb_files #preparing directories
mkdir -p $vini_dir/ligands/sdf_files
mkdir -p $vini_dir/ligands/pdbqt_files
mkdir -p $vini_dir/ligands/fasta_files
mkdir -p $vini_dir/ligands/sme_files
mkdir -p $WORKDIR/ligands_stage   #stagging area

mkdir -p $vini_dir/genes
mkdir -p $vini_dir/genes/pdb_files
mkdir -p $vini_dir/genes/expressions 
mkdir -p $vini_dir/genes/mutations
mkdir -p $vini_dir/genes/sequences

# Added checking for PBS and global variable for script type

sinfo 2&> tmp #try to find which workload manager is running #we are trying to detect SLURM
grep "command not found" tmp > tmp2
if [ -s tmp2 ]
then
    pbsnodes 2&> tmp3 # trying to detect PBS
    grep "command not found" tmp3 > tmp4
    if [ -s tmp4 ]
    then
         exit
    else
	echo "export SCTYPE=PBS"       >> $vini_dir/globals
        echo "export job_status=qstat" >> $vini_dir/globals
        echo "export job_submit=qsub"  >> $vini_dir/globals
        echo "export job_cancel=qdel"  >> $vini_dir/globals
        echo "PBS partitions are configured as:" ; pbsnodes
	read -p "Enter the name of PBS partition Vini will use:" partition
        cores=$(pbsnodes -a | sed -n "/partition=$partition/,/Mom=/p" | sed -n 's/^ *resources_available.ncpus = \([0-9]*\)/\1/p' | head -n 1)
        memsize=$(pbsnodes -a | sed -n "/partition=$partition/,/Mom=/p" | sed -n 's/^ *resources_available.mem = \([0-9]*\)kb/\1/p' | head -n 1)
        echo "export partition=${partition}" >> $vini_dir/globals
        echo "export cores=${cores}"         >> $vini_dir/globals
        echo "export memsize=${memsize}" >> $vini_dir/globals
    fi
else 
    echo "export SCTYPE=SLURM"   	>> $vini_dir/globals
    echo "export job_status=squeue"     >> $vini_dir/globals
    echo "export job_submit=sbatch"     >> $vini_dir/globals
    echo "export job_cancel=scancel"    >> $vini_dir/globals
    echo "SLURM partitions are configured as:" ; sinfo
    read -p "Enter the name of partition Vini will use:" partition
    cores=$(sinfo -o "%P %n %c" -p $partition | awk 'NR==2 {print $3}')
    memsize=$(sinfo -o "%P %n %m" -p $partition | awk 'NR==2 {print $3}')
    echo "export partition=${partition}" >> $vini_dir/globals
    echo "export cores=${cores}" >> $vini_dir/globals
    echo "export memsize=${memsize}" >> $vini_dir/globals
fi

echo -n "Cancelling any remaining jobs from the previous run, please wait..."

$job_status -u $USER > jobs
nolines=`wc -l < jobs`
if [ $nolines -eq $ONES ]
then
    echo "no jobs to cancel."
else
    let nolines++
    for (( i=2; i<(nolines+1); i++ ))
    do
        line=`head -$i jobs | tail -1`
        job=`echo $line | awk '{print $1}'`
        $job_cancel $job
    done
fi
rm -f jobs

cat COPYRIGHT

read -p "Enter your SLURM/PBS  account or NONE if you do not have it:" ACCOUNT
echo "export ACCOUNT=${account}" >> $vini_dir/globals

walltime=60   #max time is 60 minutes

> $WORKDIR/dock_id_list  #Clear precedence lists
> $WORKDIR/slem_id_list

maxcores=500000    #Vini is allowed to request 500000 cores
max_jobs=`echo $maxcores $cores | awk '{print $1 / $2}'`
max_jobs=${max_jobs%.*}
nodes=`echo $maxcores $cores | awk '{print $1 / $2}'`
nodes=${nodes%.*}

echo "export cores=${cores}"            >> $vini_dir/globals
echo "export max_jobs=${max_jobs}"      >> $vini_dir/globals
echo "export nodes=${nodes}"            >> $vini_dir/globals

echo ; echo "If you never registered to Drugbank before, stop here. Go to https://go.drugbank.com/public_users/sign_up and sign-up. Upon receiving the approval, enter your registration email and password here."
read -e -p "Already registered (y/n)? Press enter to accept the default: " -i "y" yesno
if  [ $yesno == "n" ]
then
    read -p "Enter email:" email
    echo -n "Enter password:"; read -s password ; echo ""
    echo $email > $WORKDIR/Drugbank_email
    echo $password > $WORKDIR/Drugbank_password
    chmod g-r,o-r $WORKDIR/Drugbank_password
else
    if [ ! -e $WORKDIR/Drugbank_email ] || [ ! -e $WORKDIR/Drugbank_password ]
    then
       echo "No registration data found! Please enter your email and DrugBank password. "
       read -p "Enter your email:" email
       echo -n "Enter DrugBank password:"; read -s password ; echo ""
       echo $email > $WORKDIR/Drugbank_email
       echo $password > $WORKDIR/Drugbank_password
       chmod g-r,o-r $WORKDIR/Drugbank_password
    fi
fi

sh $vini_dir/renew_Drugbank_data  #update drug?links.csv file

cp $vini_dir/ligands/ligands_list $vini_dir/ligands/ligands_list.orig #saving the original list of drugs

sh $vini_dir/prepare_ligands_list
sh $vini_dir/prepare_small_drug_structures                
cp -r $vini_dir/ligands/pdb_files/* $vini_dir/database/ligands/pdb_files
sh $vini_dir/download_Drugbank_fasta_structures            #download fasta files from Drugbank



echo "AlphaFold will be used for protein structures prediction."
echo "AlphaFold is using 128 cores and 225 GB per node"
partition=`cat active_partition`
echo "export AlphaFold_base=full_dbs" >> $vini_dir/globals
echo "export cpus=128" >> $vini_dir/globals
echo "export partition=${active_partition}" >> $vini_dir/globals

read -e -p "Include cancer gene expressions and mutations from COSMIC into analysis (y/n)? Press enter to accept the default: " -i "n" cosmic

if  [ $cosmic == "y" ]
then
    echo "export cosmic=y" >> $vini_dir/globals
    echo "export exp=exp"   >> $vini_dir/globals
    echo ; echo "If you have never registered for COSMIC before, stop here.. Go to https://cancer.sanger.ac.uk/cosmic/register  and register. Upon receiving approval, enter your registration email and password here."

    # https://cancer.sanger.ac.uk/cell_lines  cell lines mutations and expressions
    
    read -e -p "Already registered (y/n)? Press enter to accept the default: " -i "y" yesno
    if  [ $yesno == "n" ]
    then
        read -p "Enter email:" email
        echo -n "Enter password:"; read -s password ; echo ""
        echo $email > $WORKDIR/COSMIC_email
        echo $password > $WORKDIR/COSMIC_password
        chmod g-r,o-r $WORKDIR/COSMIC_password
    else
        if  [ ! -e $WORKDIR/COSMIC_email ] || [ ! -e $WORKDIR/COSMIC_password ] ; then
            echo "no data found. You will need to enter data for the first time. "
            read -p "Enter email:" email
            echo -n "Enter password:"; read -s password ; echo ""
            echo $email > $WORKDIR/COSMIC_email
            echo $password > $WORKDIR/COSMIC_password
            chmod g-r,o-r $WORKDIR/COSMIC_password
        fi
    fi
    touch -a -m -t 200001010101 $WORKDIR/COSMIC_token #reset time creation to 01-01-2000
    sh $vini_dir/renew_COSMIC_token #update COSMIC token if older than 24 hours
    kit="n"
    echo "export kit=$kit" >> $vini_dir/globals
    
else
    echo "export cosmic=n" >> $vini_dir/globals
    echo "export exp=noexp"   >> $vini_dir/globals
fi

read -e -p "Do you want to include your own cancer gene expression data into the analysis (y/n)? Enter for default: " -i "n" kit
if  [ $kit == "y" ]
then
    echo "vi editor will open. Write the data in the form: genename uniprotID expression. Then press <:wq!> to save the data!."
    read -p "press enter when ready to continue." enter
    vi $vini_dir/database/genes/custom_genes
fi
echo "export kit=$kit" >> $vini_dir/globals

#https://www.uniprot.org/uniprot/?query=database:(type:pdb)&format=tab&columns=id,entry%20name,reviewed,database(PDB) #uniprot PDB cross-references --> uniprot_db_new

# https://cactus.nci.nih.gov/download/roadmap #download all PubChem compounds


echo -n "Trying to retrieve the list of available organisms from KEGG, please wait..."
wget -O tmp --no-check-certificate -q http://rest.kegg.jp/list/organism
echo "done."
awk '{$1=""}1' tmp | awk '{$1=$1}1' > tmp2
awk 'NF{NF--};1' <tmp2 > $WORKDIR/organisms
echo "Next will be shown the list of available organisms (use bar to scroll and <q> to exit)."
echo "Then choose the abbreviation for organism to analyse  and press <enter>. Example: for dog, enter cfa ."
echo ""
echo "" ; read -p "Press enter to continue." cont
cat $WORKDIR/organisms | less
echo "" ; rm tmp tmp2
read -e -p "Please enter the abbreviation for organism you want to analyse? Press enter to accept the default: " -i "hsa" ORGANISM

echo "export ORGANISM=$ORGANISM" >> $vini_dir/globals


echo -n "Trying to retrieve the list of available metabolic pathways from KEGG, please wait..."
wget -O $vini_dir/tmp --no-check-certificate -q $vini_dir/tmp http://rest.kegg.jp/list/pathway/${ORGANISM}
echo "done."
cat tmp | sed "s/path:hsa//g" > $WORKDIR/pathways ; rm tmp

echo "Next will be shown the list of available pathways (use bar to scroll and <q> to exit)."
echo "Then choose the pathway number and press <enter>. Example: For screening prostate cancer, enter 05215 ."
echo ""
echo "tip: For cancer type not in the list, choose 05200 (general cancer pathway)."
echo "" ; read -p "Press enter to continue." cont
cat $WORKDIR/pathways | less
echo ""
read -e -p "Write in the KEGG pathway number or press enter to accept the default:" -i "05215" cancer_type
echo "export cancer_type=${cancer_type}" >> $vini_dir/globals
data="_data"

read -e -p "Include the analysis of specific cancer cell line (y/n)? Press enter to accept the default: " -i "y" yesno
if [ $yesno == y ]
then
    compute_cell_line=$TRUE
    echo "export compute_cell_line=${compute_cell_line}" >> $vini_dir/globals
    #DU145, PC3, and LNCaP cells - prostate cell lines
    read -e -p "Please enter the name of cell line (e.g. MDA-MB-231): Press enter to accept the default: " -i "DU-145" cell_line
    if  [ $cosmic == "y" ]
    then
        if  [ ! -e $vini_dir/database/NCI-60_cell_lines/$cell_line/expressions/${cell_line}.csv ]
        then
            echo "WARNING: Before proceeding, upload file with cell expression data" $cell_line.csv "to" $vini_dir/database/genes/expressions "directory!"
            #echo "Expression file can be downloaded from: https://cancer.sanger.ac.uk/cosmic-download/download/index?table=V92_37_CLP_COMPLETEGENEEXPR&samplename=<cell name>&token=<token number"
            echo "Expression file can be downloaded from: https://cancer.sanger.ac.uk/cosmic-download/download/index?table=V92_37_CLP_COMPLETEGENEEXPR&samplename=PC3&token=690964090297947914600221106259589042"
            read -p "press enter when the upload is done." ready
            echo $cell_line > cell_line
            if [ ! -f $vini_dir/database/genes/expressions/${cell_line}.csv ]
            then
                echo "WARNING: File with expressions for" ${cell_line} "cell line not found!"
                echo -n "Obtain this file manually from COSMIC DB "
                echo "and put it under" $vini_dir/database/genes/expressions/ "directory with the name" ${cell_line}.csv 
                read -p "Press enter when done." enter
            else
                echo ${cell_line} "cell line will be processed."    
            fi
        else
            rm -rf $vini_dir/KEGG_cancer_pathways/$CANCER_PATHWAY/$cell_line
        fi
    fi

    echo "export cell_line=${cell_line}" >> $vini_dir/globals
    echo "Creating ligands_list file with drugs in NCI-60 database."
    source $vini_dir/globals
    sh $vini_dir/create_NSC_numbers_file
    > $WORKDIR/NCI-60_ligands_list
    while read -r line
    do
        drugname=`echo $line | awk -F','  '{print $1}'`
        grep -w ${drugname} $vini_dir/ligands/ligands_list > tmp
        if [ -s tmp ]
        then
            cat tmp >> $WORKDIR/NCI-60_ligands_list
            echo $drugname "will be analysed."
        fi
    done < $vini_dir/database/NSC_numbers

    read -e -p "Use ligands_list or NCI-60_ligands_list file? Press enter to accept the default: " -i "ligands_list" file
    if  [ $file == NCI-60_ligands_list ]
    then
        mv $WORKDIR/NCI-60_ligands_list $vini_dir/ligands/ligands_list
        echo "export NCI60=yes" >> $vini_dir/globals
    else
        echo "export NCI60=no" >> $vini_dir/globals
    fi
else
    compute_cell_line=$FALSE
    echo "export compute_cell_line=${compute_cell_line}" >> $vini_dir/globals
    cell_line=PUBLIC
    echo $cell_line > cell_line
    echo "export cell_line=PUBLIC" >> $vini_dir/globals
fi


ligands=`wc -l < $vini_dir/ligands/ligands_list` ; echo $ligands > $WORKDIR/ligands

#Autogrid4 fires "Unknown receptor type: "Se, Pt, etc. ",  -- Add parameters for it to the parameter library first!"
#We must add entries from "AD4_parameters_for_metal_ions" file located in Vini source  directory to AD4_parameters.dat
#AD4_parameters.dat is located in $MGLTOOLS directory
#Copy it to the working directory : http://autodock.scripps.edu/faqs-help/faq/how-do-i-add-new-atom-types-to-autodock-4

echo -n "Checking if AD4_parameters.dat file in MGLTools needs modification..."
if [ ! -e $MGLTOOLS/AD4_parameters.dat.orig ] #enable MGLTools to work with metal ions
then
    cp $MGLTOOLS/AD4_parameters.dat $MGLTOOLS/AD4_parameters.dat.orig
    grep atom_par $vini_dir/AD4_parameters_for_metal_ions >> $MGLTOOLS/AD4_parameters.dat
    echo "parameters for metal ions added."
else
    echo "no need for modification. Parameters for metal ions are already present in AD4_parameters.dat file."
fi

read -e -p "Choose therapy level (1 for single drug therapy, 2 for two drugs therapy, etc. ) : " -i "1" max_therapy_level
echo "export max_therapy_level=${max_therapy_level}" >> globals

rm -rf $WORKDIR/$cancer_type$data
CANCER_PATHWAY=$ORGANISM$cancer_type                             #setting cancer pathway
echo "export CANCER_PATHWAY=${CANCER_PATHWAY}" >> $vini_dir/globals
mkdir -p $WORKDIR/${CANCER_PATHWAY}_results
#cp $vini_dir/prep_prot_lig.py $WORKDIR
#read -e -p "Enter the number of Autodock Vina exhaustive searches. Press enter to accept the default : " -i "100" exhaustiveness
echo "export exhaustiveness=100" >> $vini_dir/globals
#num_modes=10
echo "export num_modes=10" >> $vini_dir/globals

read -e -p "Run Vini in debug mode (output will be redirected to the screen) (y/n)?. Press enter to accept the default:" -i "n" yesno
if  [ $yesno == n ]
then
    uname -n > node
    node=`cat node`
    echo -n "Starting Vini in the background. You can follow the progress by inspecting the file nohup.out in the folder " ; pwd
    nohup ./VelikaVini &
    echo $! > masterpid
    masterpid=`cat masterpid`
    echo -n "If you want to stop Vini, execute kill -9 $masterpid on the node $node"
else
    ./VelikaVini
fi
