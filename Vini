echo "The Vini in silico model of cancer is supercomputing application for performing multi-drug pathway based virtual drug screening."
echo "If using this program in your academic research , please cite:"                                                   #
echo " Tomic D., Skala K., Kranjcevic L., Pirkic B., Stifter S., et al. (2018) Evaluation of the Efficacy of Cancer Drugs by Using the Second Largest Eigenvalue of Metabolic Cancer Pathways. J Comput Sci Syst Biol 11: 240-248. doi:10.4172/jcsb.1000280"
echo ; sleep 1

TWO=2
HSA=hsa
TRUE=1
FALSE=0
ONES=1


if  [[ -e Vini_crash.log ]] &&  [[ ! -s Vini_crash.log ]] 
then 
    echo "Vini is continuing processing after the system failure in the background. Check nohup.out for more information."
    nohup ./$vini_dir/malavini &         #start again from the restart point
    exit
else
    > Vini.crashlog
    > restartfile
    echo init > state
fi

echo -n "Checking for user..." 
if [[ $HOME == "/root" ]]
then
    echo "Please run Vini as an ordinary user, not as a root! Exiting..."
    exit
else
    echo passed.
fi


echo -n "Checking for the installation of the 3rd party software..."
if  [ -e sourceme ]
then
    echo "The following software is installed:" 
    cat sourceme | grep section | sed 's/section//' | sed 's/General//'
    programs=`grep section sourceme | wc -l`
    NOPROGS=11   #the number of 3rd programs Vini is using
    if  [ $programs -lt $NOPROGS ]
    then
        echo "Some 3rd party programs are missing. Trying to install them."
        sh install.sh
        echo "Installation is finished. Log in and start Vini again."
        exit
    else
        echo "All required programs are in place, continuing."
    fi
else
    sh install.sh
    echo "Installation is finished. Re-login and start Vini again."
    pkill -u $USER
fi

sh $vini_dir/clean

echo -n "Checking for the ligands_list file..."
if [ -e $vini_dir/ligands/ligands_list ]
then
    echo passed.
else
    echo "you must provide ligand list. Exiting." ; exit
fi

mkdir -p $vini_dir/ligands/pdb_files #preparing directories
mkdir -p $vini_dir/ligands/sdf_files
mkdir -p $vini_dir/ligands/pdbqt_files
mkdir -p $vini_dir/ligands/fasta_files
mkdir -p $vini_dir/ligands/sme_files
mkdir -p $WORKDIR/ligands_stage   #stagging area

mkdir -p $vini_dir/genes
mkdir -p $vini_dir/genes/pdb_files
mkdir -p $vini_dir/genes/expressions 
mkdir -p $vini_dir/genes/mutations
mkdir -p $vini_dir/genes/sequences


echo -n "Checking for SLURM..."
sinfo 2&> tmp #try to find which workload manager is running #we are trying to detect SLURM
grep "command not found" tmp > tmp2
if [ -s tmp2 ]
then
    echo "not found. Exiting."
    exit
else
    echo "found."
    JSS=1
    echo squeue > job_status
    echo sbatch > job_submit
    echo scancel > job_cancel
    echo "SLURM" > $WORKDIR/scheduler
    sh $vini_dir/set_partitions
    read -e -p "Enter name of the default partition Vini will use (press enter to accept the default):" -i "cpu" active_partition
    echo $active_partition > active_partition
    echo $JSS > $WORKDIR/JSS
fi

echo -n "Cancelling any remaining jobs from the previous run, please wait..."
job_status=`cat job_status`
job_cancel=`cat job_cancel`

$job_status -u $USER > jobs
nolines=`wc -l < jobs`
if [ $nolines -eq $ONES ]
then
    echo "no jobs to cancel."
else
    let nolines++
    for (( i=2; i<(nolines+1); i++ ))
    do
        line=`head -$i jobs | tail -1`
        job=`echo $line | awk '{print $1}'`
        $job_cancel $job
    done
    sh $vini_dir/wait_until_jobs_finish
fi
rm -f jobs

cd $WORKDIR #Cleanup
rm -f complex_*.job ligand_*.pdbqt cancer_type complexes receptors receptors_contracted receptors_expanded relations stats target_dir therapy_level Vina complex_???.jo* temp_buf
rm -f *err *out
cd $vini_dir

cat COPYRIGHT

read -e -p "Enter your SLURM account provided by admin. Press enter to accept " -i "r2022r03-224-users" slurm_account
echo $slurm_account > $WORKDIR/slurm_account

if [ -e $WORKDIR/test_compute_nodes ]
then
    birth=`stat $WORKDIR/test_compute_nodes | grep Birth`
    echo "Testing of computing nodes has already been done on $birth. If there have been any changes in the meantime, the procedure should be repeated."

    read -e -p "Do you want to repeat the procedure? (y/n). Press enter to accept the default: " -i "n" yesno
    if [ $yesno == y ]
    then
        sh $vini_dir/test_compute_nodes
    fi
else
    echo "A cluster health check will now be performed."
    sh $vini_dir/test_compute_nodes
fi


if [ -e $WORKDIR/gather_hardware_info ]
then
    birth=`stat $WORKDIR/gather_hardware_info | grep Birth`
    echo "Hardware information (CPU cores, node memory size) has been already gathered on $birth."
    read -e -p "Do you want to repeat the procedure? (y/n). Press enter to accept the default: " -i "n" yesno
    if [ $yesno == y ]
    then
        sh $vini_dir/gather_hardware_info
    fi
else
    sh $vini_dir/gather_hardware_info
fi


sh $vini_dir/prepare_SLURM_scripts

#read -e -p "Enter the maximum time (in hours) for SLURM jobs. Press enter to accept the default: " -i "48" walltime
#echo $walltime > $WORKDIR/walltime
echo "rosetta" > $WORKDIR/docking

partition=`cat cpu_partition`
cores=`cat ${partition}_cores`
Vinathreads=4

read -e -p "Enter the maximum number of CPU cores Vini can use at the same time. Press enter to accept the default: " -i "32000" maxcores
maxcores=`echo $maxcores $TWO | awk '{print $1 / $2}'`

Vinajobs=`echo $maxcores $Vinathreads | awk '{print $1 / $2}'`
Vinajobs=${Vinajobs%.*}
echo $Vinajobs > $WORKDIR/max_jobs  #this defines max number of the Autodock Vina jobs

nodes=`echo $maxcores $cores | awk '{print $1 / $2}'`
nodes=${nodes%.*}
echo $nodes > $WORKDIR/nodes
echo "Number of concurrent Vinajobs (each job using $Vinathreads CPU cores) will be limited to $Vinajobs"
echo "Number of concurrent  AlphaFold jobs (each job using $cores CPU cores) will be limited to $nodes"

echo ; echo "If you never registered to Drugbank before, stop here. Go to https://go.drugbank.com/public_users/sign_up and sign-up. Upon receiving the approval, enter your registration email and password here."
read -e -p "Already registered (y/n)? Press enter to accept the default: " -i "y" yesno
if  [ $yesno == "n" ]
then
    read -p "Enter email:" email
    echo -n "Enter password:"; read -s password ; echo ""
    echo $email > $WORKDIR/Drugbank_email
    echo $password > $WORKDIR/Drugbank_password
    chmod g-r,o-r $WORKDIR/Drugbank_password
else
    if [ ! -e $WORKDIR/Drugbank_email ] || [ ! -e $WORKDIR/Drugbank_password ]
    then
       echo "No registration data found! Please enter your email and DrugBank password. "
       read -p "Enter your email:" email
       echo -n "Enter DrugBank password:"; read -s password ; echo ""
       echo $email > $WORKDIR/Drugbank_email
       echo $password > $WORKDIR/Drugbank_password
       chmod g-r,o-r $WORKDIR/Drugbank_password
    fi
fi

sh $vini_dir/renew_Drugbank_data  #update drug?links.csv file

cp $vini_dir/ligands/ligands_list $vini_dir/ligands/ligands_list.orig #saving the original list of drugs

sh $vini_dir/prepare_ligands_list
sh $vini_dir/prepare_small_drug_structures                 #prepare pdb files for Rosetta docking
sh $vini_dir/download_Drugbank_fasta_structures            #download fasta files from Drugbank


echo "AlphaFold will be used for protein structures prediction."
partition=`cat active_partition`
memsize=`cat ${partition}_memsize | tr -dc '0-9'`
echo "full_dbs" > AlphaFold_base                  #Vini is using full AlphaFold base

read -e -p "Include cancer gene expressions and mutations from COSMIC into analysis (y/n)? Press enter to accept the default: " -i "y" cosmic

if  [ $cosmic == "y" ]
then
    echo ; echo "If you have never registered for COSMIC before, stop here.. Go to https://cancer.sanger.ac.uk/cosmic/register  and register. Upon receiving approval, enter your registration email and password here."

    # https://cancer.sanger.ac.uk/cell_lines  cell lines mutations and expressions
    
    read -e -p "Already registered (y/n)? Press enter to accept the default: " -i "y" yesno
    if  [ $yesno == "n" ]
    then
        read -p "Enter email:" email
        echo -n "Enter password:"; read -s password ; echo ""
        echo $email > $WORKDIR/COSMIC_email
        echo $password > $WORKDIR/COSMIC_password
        chmod g-r,o-r $WORKDIR/COSMIC_password
    else
        if  [ ! -e $WORKDIR/COSMIC_email ] || [ ! -e $WORKDIR/COSMIC_password ] ; then
            echo "no data found. You will need to enter data for the first time. "
            read -p "Enter email:" email
            echo -n "Enter password:"; read -s password ; echo ""
            echo $email > $WORKDIR/COSMIC_email
            echo $password > $WORKDIR/COSMIC_password
            chmod g-r,o-r $WORKDIR/COSMIC_password
        fi
    fi
    touch -a -m -t 200001010101 $WORKDIR/COSMIC_token #reset time creation to 01-01-2000
    sh $vini_dir/renew_COSMIC_token #update COSMIC token if older than 24 hours
    exp=exp
    kit="n"
else
    read -p "Do you want to include your own cancer gene expression data into the analysis (y/n)?" kit
    if   [ $kit == "y" ]
    then
        echo "vi editor will open. Write the data in the form: genename uniprotID expression. Then press <:wq!> to save the data!."
        read -p "press enter when ready to continue." enter
        vi $vini_dir/database/genes/custom_genes
    fi
    exp=noexp
fi
echo $kit > $WORKDIR/kit
echo $cosmic > $WORKDIR/cosmic
echo $exp > $WORKDIR/exp

#https://www.uniprot.org/uniprot/?query=database:(type:pdb)&format=tab&columns=id,entry%20name,reviewed,database(PDB) #uniprot PDB cross-references --> uniprot_db_new

# https://cactus.nci.nih.gov/download/roadmap #download all PubChem compounds

read -e -p "Delete all the data previously created by Vini (y/n)? Press enter to accept the default: " -i "y" erase
if  [[ $erase == "y" ]]
then
    rm -rf $WORKDIR/*_data
    rm -f $WORKDIR/free_binding_energy_data  #file where computed FBE values will be stored
fi

echo -n "Trying to retrieve the list of available organisms from KEGG, please wait..."
wget -O tmp --no-check-certificate -q http://rest.kegg.jp/list/organism
echo "done."
awk '{$1=""}1' tmp | awk '{$1=$1}1' > tmp2
awk 'NF{NF--};1' <tmp2 > $WORKDIR/organisms
echo "Next will be shown the list of available organisms (use bar to scroll and <q> to exit)."
echo "Then choose the abbreviation for organism to analyse  and press <enter>. Example: for dog, enter cfa ."
echo ""
echo "" ; read -p "Press enter to continue." cont
cat $WORKDIR/organisms | less
echo "" ; rm tmp tmp2
read -e -p "Please enter the abbreviation for organism you want to analyse? Press enter to accept the default: " -i "hsa" ORGANISM

echo $ORGANISM > $WORKDIR/ORGANISM

echo -n "Trying to retrieve the list of available metabolic pathways from KEGG, please wait..."
wget -O $vini_dir/tmp --no-check-certificate -q $vini_dir/tmp http://rest.kegg.jp/list/pathway/${ORGANISM}
echo "done."
cat tmp | sed "s/path:hsa//g" > $WORKDIR/pathways ; rm tmp

echo "Next will be shown the list of available pathways (use bar to scroll and <q> to exit)."
echo "Then choose the pathway number and press <enter>. Example: For screening prostate cancer, enter 05215 ."
echo ""
echo "tip: For cancer type not in the list, choose 05200 (general cancer pathway)."
echo "" ; read -p "Press enter to continue." cont
cat $WORKDIR/pathways | less
echo ""
read -e -p "Write in the KEGG pathway number or press enter to accept the default:" -i "05215" cancer_type
echo $cancer_type > $WORKDIR/cancer_type
data="_data"

read -e -p "Include the analysis of specific cancer cell line (y/n)? Press enter to accept the default: " -i "y" yesno
if [ $yesno == y ]
then
    compute_cell_line=$TRUE ; echo $compute_cell_line > $WORKDIR/compute_cell_line
    #DU145, PC3, and LNCaP cells - prostate cell lines
    read -e -p "Please enter the name of cell line (e.g. MDA-MB-231): Press enter to accept the default: " -i "DU-145" cell_line
    if  [ $cosmic == "y" ]
    then
        if  [ ! -e $vini_dir/database/NCI-60_cell_lines/$cell_line/expressions/${cell_line}.csv ]
        then
            echo "WARNING: Before proceeding, upload file with cell expression data" $cell_line.csv "to" $vini_dir/database/genes/expressions "directory!"
            #echo "Expression file can be downloaded from: https://cancer.sanger.ac.uk/cosmic-download/download/index?table=V92_37_CLP_COMPLETEGENEEXPR&samplename=<cell name>&token=<token number"
            echo "Expression file can be downloaded from: https://cancer.sanger.ac.uk/cosmic-download/download/index?table=V92_37_CLP_COMPLETEGENEEXPR&samplename=PC3&token=690964090297947914600221106259589042"
            read -p "press enter when the upload is done." ready
            echo $cell_line > cell_line
            if [ ! -f $vini_dir/database/genes/expressions/${cell_line}.csv ]
            then
                echo "WARNING: File with expressions for" ${cell_line} "cell line not found!"
                echo -n "Obtain this file manually from COSMIC DB "
                echo "and put it under" $vini_dir/database/genes/expressions/ "directory with the name" ${cell_line}.csv 
                read -p "Press enter when done." enter
            else
                echo ${cell_line} "cell line will be processed."    
            fi
        else
            rm -rf $vini_dir/KEGG_cancer_pathways/$CANCER_PATHWAY/$cell_line
        fi
    fi
    echo $cell_line > cell_line
    echo "Creating ligands_list file with drugs in NCI-60 database."
    sh $vini_dir/create_NSC_numbers_file
    > $WORKDIR/NCI-60_ligands_list
    while read -r line
    do
        drugname=`echo $line | awk -F','  '{print $1}'`
        grep -w ${drugname} $vini_dir/ligands/ligands_list > tmp
        if [ -s tmp ]
        then
            cat tmp >> $WORKDIR/NCI-60_ligands_list
            echo $drugname "will be analysed."
        fi
    done < $vini_dir/database/NSC_numbers

    read -e -p "Use ligands_list or NCI-60_ligands_list file? Press enter to accept the default: " -i "ligands_list" file
    if  [ $file == NCI-60_ligands_list ]
    then
        mv $WORKDIR/NCI-60_ligands_list $vini_dir/ligands/ligands_list
        echo "yes" > $WORKDIR/validate_NCI-60_data
    else
        echo "no" > $WORKDIR/validate_NCI-60_data
    fi
else
    compute_cell_line=$FALSE
    echo $compute_cell_line > $WORKDIR/compute_cell_line
    cell_line=PUBLIC
    echo $cell_line > cell_line
fi

ligands=`wc -l < $vini_dir/ligands/ligands_list` ; echo $ligands > $WORKDIR/ligands

#Autogrid4 fires "Unknown receptor type: "Se, Pt, etc. ",  -- Add parameters for it to the parameter library first!"
#We must add entries from "AD4_parameters_for_metal_ions" file located in Vini source  directory to AD4_parameters.dat
#AD4_parameters.dat is located in $MGLTOOLS directory
#Copy it to the working directory : http://autodock.scripps.edu/faqs-help/faq/how-do-i-add-new-atom-types-to-autodock-4

#echo -n "Checking if AD4_parameters.dat file in MGLTools needs modification..."
#if [ ! -e $MGLTOOLS/AD4_parameters.dat.orig ] #enable MGLTools to work with metal ions
#then
#    cp $MGLTOOLS/AD4_parameters.dat $MGLTOOLS/AD4_parameters.dat.orig
#    grep atom_par $vini_dir/AD4_parameters_for_metal_ions >> $MGLTOOLS/AD4_parameters.dat
#    echo "parameters for metal ions added."
#else
#    echo "no need for modification. Parameters for metal ions are already present in AD4_parameters.dat file."
#fi

read -e -p "Choose therapy level (1 for single drug therapy, 2 for two drugs therapy, etc. ) : " -i "1" therapy_level
echo ${therapy_level} > $WORKDIR/max_therapy_level

rm -rf $WORKDIR/$cancer_type$data
CANCER_PATHWAY=$ORGANISM$cancer_type                             #setting cancer pathway
mkdir -p $WORKDIR/${CANCER_PATHWAY}_results
#cp $vini_dir/prep_prot_lig.py $WORKDIR
num_modes=9
echo $num_modes > $WORKDIR/num_modes
#read -e -p "Enter the number of Autodock Vina exhaustive searches. Press enter to accept the default : " -i "100" exhaustiveness
#exhaustiveness=8
echo $exhaustiveness > $WORKDIR/exhaustiveness
box_size=40
echo ${box_size} > $WORKDIR/box_size
affinity=0.00 #In case of error we take zero binding energy
echo $affinity > $WORKDIR/random_affinity

#read -e -p "Write restart frequency (for restarting a simulation in case of a system crash). Press enter to accept the default : " -i "4800" restartfreq
#echo $restartfreq > $WORKDIR/restartfreq

read -e -p "Run Vini in debug mode (output will be redirected to the screen) (y/n)?. Press enter to accept the default (debug): " -i "y" mode
if  [ $mode == n ]
then
    nohup ./VelikaVini & 
    echo $! > masterpid
    echo "Vini will now continue to work in the background."
    echo "You can follow the progress of Vini by inspecting the nohup.out file in this folder."
else
    ./VelikaVini
    echo $! > masterpid
fi
