echo "The Vini in silico model of cancer is supercomputing application for performing multi-drug pathway based virtual drug screening."
echo "If using this program in your academic research , please cite:"                                                   #
echo " Tomic D., Skala K., Kranjcevic L., Pirkic B., Stifter S., et al. (2018) Evaluation of the Efficacy of Cancer Drugs by Using the Second Largest Eigenvalue of Metabolic Cancer Pathways. J Comput Sci Syst Biol 11: 240-248. doi:10.4172/jcsb.1000280"
echo ; sleep 1

NULL=0
ONES=1
TWO=2
THREE=3
HSA=hsa
TRUE=1
FALSE=0
min_memory=128 #for AlphaFold

echo -n "Checking for user..." 
if [[ $HOME == "/root" ]]
then
    echo "Please run Vini as an ordinary user, not as a root! Exiting..."
    exit
else
    echo passed.
fi


echo -n "Checking for the installation of the 3rd party software..."
if  [ -e sourceme ]
then
    echo "The following software is installed:" 
    cat sourceme | grep section | sed 's/section//' | sed 's/General//'
    programs=`grep section sourceme | wc -l`
    no=14
    if  [ $programs -lt $no ]
    then
        echo "Some 3rd party programs are missing. Trying to install them."
        sh install.sh
        echo "Done, performing logout. Log in and start Vini again."
        #pkill -u $USER
    else
        echo "3rd party programs are in place, continuing."
    fi
else
    sh install.sh
    echo "Installation done, performing logout. Log in and start Vini again."
    pkill -u $USER
fi

sh $vini_dir/clean

echo -n "Checking for the ligands_list file..."
if [ -e $vini_dir/ligands/ligands_list ]
then
    cp $vini_dir/ligands/ligands_list $vini_dir/ligands/ligands_list.sav #saving the original list of drugs
    echo passed.
else
    echo "you must provide ligand list. Exiting." ; exit
fi

mkdir -p $vini_dir/ligands/pdb_files #preparing directories
mkdir -p $vini_dir/ligands/sdf_files
mkdir -p $vini_dir/ligands/pdbqt_files
mkdir -p $vini_dir/ligands/fasta_files

mkdir -p $vini_dir/genes
mkdir -p $vini_dir/genes/pdb_files
mkdir -p $vini_dir/genes/expressions 
mkdir -p $vini_dir/genes/mutations
mkdir -p $vini_dir/genes/sequences


echo -n "Checking for SLURM..."
sinfo 2&> tmp #try to find which workload manager is running #we are trying to detect SLURM
grep "command not found" tmp > tmp2
if [ -s tmp2 ]
then
    echo "not found. Exiting."
    exit
else
    echo "found."
    JSS=1
    echo squeue > $WORKDIR/job_status
    echo sbatch > $WORKDIR/job_submit
    echo scancel > $WORKDIR/job_cancel
    echo "SLURM" > $WORKDIR/scheduler
    sh determine_SLURM_environment
    read -e -p "Enter the name of partition Vini will use (press enter to accept the default):" -i "cpu" active_partition
    echo $active_partition > $WORKDIR/active_partition
    echo $JSS > $WORKDIR/JSS
fi


echo -n "Cancelling any remaining jobs from the previous run, please wait..."
job_status=`cat $WORKDIR/job_status`
job_cancel=`cat $WORKDIR/job_cancel`
user=`echo ${USER:0:8}` #for long partition names last characters may be lost
$job_status | grep $user > jobs
if [ -s jobs ]
then
    echo -n "Trying to cancel all $USER SLURM jobs..."
    while read -r line
    do
        job=`echo $line | awk '{print $1}'`
        $job_cancel $job
    done < jobs
    sh $vini_dir/wait_until_jobs_finish
    echo "done."
else
    echo "no remaining jobs."
fi
rm -f jobs

cd $WORKDIR #Cleanup
rm -f complex_*.job ligand_*.pdbqt cancer_type complexes receptors receptors_contracted receptors_expanded relations stats target_dir therapy_level Vina complex_???.jo* temp_buf
rm -f *err *out
cd $vini_dir

cat COPYRIGHT

if [ -e $WORKDIR/test_compute_nodes ]
then
    birth=`stat $WORKDIR/test_compute_nodes | grep Birth`
    echo "Testing of computing nodes has already been done on $birth. If there have been any changes in the meantime, the procedure should be repeated."

    read -e -p "Do you want to repeat the procedure? (y/n). Press enter to accept the default: " -i "n" yesno
    if [ $yesno == y ]
    then
        sh $vini_dir/test_compute_nodes
    fi
else
    echo "A cluster health check will now be performed."
    sh $vini_dir/test_compute_nodes
fi


if [ -e $WORKDIR/gather_hardware_info ]
then
    birth=`stat $WORKDIR/gather_hardware_info | grep Birth`
    echo "Hardware information gathering has already been done on $birth.Â  If there have been any changes in the meantime, the procedure should be repeated."
    read -e -p "Do you want to repeat the procedure? (y/n). Press enter to accept the default: " -i "n" yesno
    if [ $yesno == y ]
    then
        sh $vini_dir/gather_hardware_info
    fi
else
    sh $vini_dir/gather_hardware_info
fi


sh $vini_dir/prepare_SLURM_scripts

read -e -p "Enter the walltime (in minutes) for short SLURM jobs. Press enter to accept the default: " -i "60" walltime
echo $walltime > $WORKDIR/walltime
echo "rosetta" > $WORKDIR/docking

partition=`cat $WORKDIR/cpu_partition`
cores=`cat $WORKDIR/${partition}_cores`
Vinathreads=4

read -e -p "Enter the maximum number of CPU cores Vini can use at the same time (each job using 4 CPUss). Press enter to accept the default: " -i "8000" maxcores
maxcores=`echo $maxcores $TWO | awk '{print $1 / $2}'`

Vinajobs=`echo $maxcores $Vinathreads | awk '{print $1 / $2}'`
Vinajobs=${Vinajobs%.*}
echo $Vinajobs > $WORKDIR/max_jobs  #this defines max number of the Autodock Vina jobs

nodes=`echo $maxcores $cores | awk '{print $1 / $2}'`
nodes=${nodes%.*}
echo $nodes > $WORKDIR/nodes
echo "Number of concurrent Vinajobs (each job using $Vinathreads CPU cores) will be limited to $Vinajobs"
echo "Number of concurrent  AlphaFold jobs (each job using $cores CPU cores) will be limited to $nodes"

echo ; echo "If you never registered to Drugbank before, stop here. Go to https://go.drugbank.com/public_users/sign_up and sign-up. Upon receiving the approval, enter your registration email and password here."
read -e -p "Already registered (y/n)? Press enter to accept the default: " -i "y" yesno
if  [ $yesno == "n" ]
then
    read -p "Enter email:" email
    echo -n "Enter password:"; read -s password ; echo ""
    echo $email > $WORKDIR/Drugbank_email
    echo $password > $WORKDIR/Drugbank_password
    chmod g-r,o-r $WORKDIR/Drugbank_password
else
    if [ ! -e $WORKDIR/Drugbank_email ] || [ ! -e $WORKDIR/Drugbank_password ]
    then
       echo "no data found. You will need to enter data for the first time. "
       read -p "Enter email:" email
       echo -n "Enter password:"; read -s password ; echo ""
       echo $email > $WORKDIR/Drugbank_email
       echo $password > $WORKDIR/Drugbank_password
       chmod g-r,o-r $WORKDIR/Drugbank_password
    fi
fi

echo ; echo "If you never registered to SWISS-MODEL before, stop here. Go to https://swissmodel.expasy.org/login_page and create account. Then enter your registration email and password here."
read -e -p "Already registered (y/n)? Press enter to accept the default: " -i "y" yesno
if  [ $yesno == "n" ]
then
    read -p "Enter email:" email
    echo -n "Enter password:"; read -s password ; echo ""
    echo $email > $WORKDIR/SWISS-MODEL_email
    echo $password > $WORKDIR/SWISS-MODEL_password
    chmod g-r,o-r $WORKDIR/SWISS-MODEL_password
else
    if [ ! -e $WORKDIR/SWISS-MODEL_email ] || [ ! -e $WORKDIR/SWISS-MODEL_password ]
    then
       echo "no data found. You will need to enter data for the first time. "
       read -p "Enter email:" email
       echo -n "Enter password:"; read -s password ; echo ""
       echo $email > $WORKDIR/SWISS-MODEL__email
       echo $password > $WORKDIR/SWISS-MODEL_password
       chmod g-r,o-r $WORKDIR/SWISS-MODEL__password
    fi
fi

sh $vini_dir/renew_Drugbank_data  #try to update drug?links.csv file if more than 7 days old

sh $vini_dir/download_Drugbank_fasta_structures #download fasta files from Drugbank

sh $vini_dir/download_Drugbank_pdb_structures #download pdb files from Drugbank

sh $vini_dir/download_Drugbank_sdf_structures #download 3D-SDF files from Drugbank


#structure_type=model #get pdb structures from RCSB
#sh $vini_dir/get_ligand_structures ${structure_type}


echo "Selecting the protein structure prediction tool."

echo -n "Checking if Alphafold is installed..."
grep AlphaFold $vini_dir/sourceme > tmp #selecting tool for protein structure prediction
if  [ -s tmp ]                          #checking if AlphaFold is installed
then
    echo "yes. Will be used for the protein structure prediction."
    partition=`cat $WORKDIR/active_partition`
    memsize=`cat $WORKDIR/${partition}_memsize | tr -dc '0-9'`
    echo A                                    > $WORKDIR/prediction_model
    echo A                                    > $WORKDIR/protein_structure_prediction
    echo $partition                           > $WORKDIR/AlphaFold_partition
    cat $WORKDIR/${partition}_cores           > $WORKDIR/AlphaFold_cpus
    cat $WORKDIR/${partition}_memsize         > $WORKDIR/AlphaFold_mem
    #echo "full_dbs"                           > $WORKDIR/AlphaFold_base 
    echo "reduced_dbs"                        > $WORKDIR/AlphaFold_base 
    echo monomer                              > $WORKDIR/AlphaFold_protein_prediction_model
    echo multimer                             > $WORKDIR/AlphaFold_biotech_prediction_model
else
    echo "no. SWISS-MODEL structure prediction tool will be used."
    echo S > $WORKDIR/protein_structure_prediction
    sh $vini_dir/SWISS_MODEL_registration
fi

echo "Which tool to use for mab drugs structure prediction (AlphaFold, Rosetta, or SWISS-MODEL)?"
read -e -p "Press enter to accept the default: " -i "SWISS-MODEL" tool
echo $tool > $WORKDIR/mab_drug_structure_prediction


read -e -p "Include cancer gene expressions and mutations from COSMIC into analysis (y/n)? Press enter to accept the default: " -i "y" cosmic

if  [ $cosmic == "y" ]
then
    echo ; echo "If you have never registered for COSMIC before, stop here.. Go to https://cancer.sanger.ac.uk/cosmic/register  and register. Upon receiving approval, enter your registration email and password here."
    
    read -e -p "Already registered (y/n)? Press enter to accept the default: " -i "y" yesno
    if  [ $yesno == "n" ]
    then
        read -p "Enter email:" email
        echo -n "Enter password:"; read -s password ; echo ""
        echo $email > $WORKDIR/COSMIC_email
        echo $password > $WORKDIR/COSMIC_password
        chmod g-r,o-r $WORKDIR/COSMIC_password
    else
        if  [ ! -e $WORKDIR/COSMIC_email ] || [ ! -e $WORKDIR/COSMIC_password ] ; then
            echo "no data found. You will need to enter data for the first time. "
            read -p "Enter email:" email
            echo -n "Enter password:"; read -s password ; echo ""
            echo $email > $WORKDIR/COSMIC_email
            echo $password > $WORKDIR/COSMIC_password
            chmod g-r,o-r $WORKDIR/COSMIC_password
        fi
    fi
    sh $vini_dir/change_COSMIC_token_file #reset time creation to 01-01-2000
    sh $vini_dir/renew_COSMIC_token #update COSMIC token if older than 24 hours
    exp=exp
    kit="n"
else
    read -p "Do you want to include your own cancer gene expression data into the analysis (y/n)?" kit
    if   [ $kit == "y" ]
    then
        echo "vi editor will open. Write the data in the form: genename uniprotID expression. Then press <:wq!> to save the data!."
        read -p "press enter when ready to continue." enter
        vi $vini_dir/database/genes/custom_genes
    fi
    exp=noexp
fi
echo $kit > $WORKDIR/kit
echo $cosmic > $WORKDIR/cosmic
echo $exp > $WORKDIR/exp

sh $vini_dir/determine_Rosetta_environment

#read -e -p "Use Rosetta Antibody [R] or AlphaFold [A] for the mAb drugs' structure predictions? Enter to accept the default: " -i "R" mab 
#if [ $mab == R ]
#then
#    echo "Rosetta Antibody will be used for the mAb drugs' structure predictions."
#    echo Rosetta                                        > $WORKDIR/biotech_drug_structure_prediction
#else
#    echo "AlphaFold will be used for the mAb drugs' structure predictions."
#    echo AlphaFold                                      > $WORKDIR/biotech_drug_structure_prediction
#fi

#https://www.uniprot.org/uniprot/?query=database:(type:pdb)&format=tab&columns=id,entry%20name,reviewed,database(PDB) #uniprot PDB cross-references --> uniprot_db_new

# https://cactus.nci.nih.gov/download/roadmap #download all PubChem compounds

read -e -p "Delete all the data previously created by Vini (y/n)? Press enter to accept the default: " -i "y" erase
if  [[ $erase == "y" ]]
then
    rm -rf $WORKDIR/*_data
    rm -f $WORKDIR/free_binding_energy_data  #file where computed FBE values will be stored
fi

echo -n "Trying to retrieve the list of available organisms from KEGG, please wait..."
wget -O tmp --no-check-certificate -q http://rest.kegg.jp/list/organism
echo "done."
awk '{$1=""}1' tmp | awk '{$1=$1}1' > tmp2
awk 'NF{NF--};1' <tmp2 > $WORKDIR/organisms
echo "Next will be shown the list of available organisms (use bar to scroll and <q> to exit)."
echo "Then choose the abbreviation for organism to analyse  and press <enter>. Example: for dog, enter cfa ."
echo ""
echo "" ; read -p "Press enter to continue." cont
cat $WORKDIR/organisms | less
echo "" ; rm tmp tmp2
read -e -p "Please enter the abbreviation for organism you want to analyse? Press enter to accept the default: " -i "hsa" ORGANISM

echo $ORGANISM > $WORKDIR/ORGANISM

echo -n "Trying to retrieve the list of available metabolic pathways from KEGG, please wait..."
wget -O $vini_dir/tmp --no-check-certificate -q $vini_dir/tmp http://rest.kegg.jp/list/pathway/${ORGANISM}
echo "done."
cat tmp | sed "s/path:hsa//g" > $WORKDIR/pathways ; rm tmp

echo "Next will be shown the list of available pathways (use bar to scroll and <q> to exit)."
echo "Then choose the pathway number and press <enter>. Example: For screening prostate cancer, enter 05215 ."
echo ""
echo "tip: For cancer type not in the list, choose 05200 (general cancer pathway)."
echo "" ; read -p "Press enter to continue." cont
cat $WORKDIR/pathways | less
echo ""
read -e -p "Write in the KEGG pathway number or press enter to accept the default:" -i "05215" cancer_type
echo $cancer_type > $WORKDIR/cancer_type
data="_data"

read -e -p "Include the analysis of specific cancer cell line (y/n)? Press enter to accept the default: " -i "y" yesno
if [ $yesno == y ]
then
    compute_cell_line=$TRUE ; echo $compute_cell_line > $WORKDIR/compute_cell_line
    #DU145, PC3, and LNCaP cells - prostate cell lines
    read -e -p "Please enter the name of cell line (e.g. MDA-MB-231): Press enter to accept the default: " -i "PC-3" cell_line
    if  [ $cosmic == "y" ]
    then
        if  [ ! -e $vini_dir/database/NCI-60_cell_lines/$cell_line/expressions/${cell_line}.csv ]
        then
            echo "WARNING: Before proceeding, upload file with cell expression data" $cell_line.csv "to" $vini_dir/database/genes/expressions "directory!"
            #echo "Expression file can be downloaded from: https://cancer.sanger.ac.uk/cosmic-download/download/index?table=V92_37_CLP_COMPLETEGENEEXPR&samplename=<cell name>&token=<token number"
            echo "Expression file can be downloaded from: https://cancer.sanger.ac.uk/cosmic-download/download/index?table=V92_37_CLP_COMPLETEGENEEXPR&samplename=PC3&token=690964090297947914600221106259589042"
            read -p "press enter when the upload is done." ready
            echo $cell_line > $WORKDIR/cell_line
            if [ ! -f $vini_dir/database/genes/expressions/${cell_line}.csv ]
            then
                echo "WARNING: File with expressions for" ${cell_line} "cell line not found!"
                echo -n "Obtain this file manually from COSMIC DB "
                echo "and put it under" $vini_dir/database/genes/expressions/ "directory with the name" ${cell_line}.csv 
                read -p "Press enter when done." enter
            else
                echo ${cell_line} "cell line will be processed."    
            fi
        else
            rm -rf $vini_dir/KEGG_cancer_pathways/$CANCER_PATHWAY/$cell_line
        fi
    fi
    echo $cell_line > $WORKDIR/cell_line
    echo "Creating ligands_list file with drugs in NCI-60 database."
    sh $vini_dir/create_NSC_numbers_file
    > $WORKDIR/NCI-60_ligands_list
    while read -r line
    do
        drugname=`echo $line | awk -F','  '{print $1}'`
        grep -w ${drugname} $vini_dir/ligands/ligands_list > tmp
        if [ -s tmp ]
        then
            cat tmp >> $WORKDIR/NCI-60_ligands_list
            echo $drugname "will be analysed."
        fi
    done < $vini_dir/database/NSC_numbers



    read -e -p "Use ligands_list or NCI-60_ligands_list file? Press enter to accept the default: " -i "ligands_list" file
    if  [ $file == NCI-60_ligands_list ]
    then
        mv $WORKDIR/NCI-60_ligands_list $vini_dir/ligands/ligands_list
        echo "yes" > $WORKDIR/validate_NCI-60_data
    else
        echo "no" > $WORKDIR/validate_NCI-60_data
    fi
else
    compute_cell_line=$FALSE
    echo $compute_cell_line > $WORKDIR/compute_cell_line
    cell_line=PUBLIC
    echo $cell_line > $WORKDIR/cell_line
fi


ligands=`wc -l < $vini_dir/ligands/ligands_list` ; echo $ligands > $WORKDIR/ligands

#Autogrid4 fires "Unknown receptor type: "Se, Pt, etc. ",  -- Add parameters for it to the parameter library first!"
#We must add entries from "AD4_parameters_for_metal_ions" file located in Vini source  directory to AD4_parameters.dat
#AD4_parameters.dat is located in $MGLTOOLS directory
#Copy it to the working directory : http://autodock.scripps.edu/faqs-help/faq/how-do-i-add-new-atom-types-to-autodock-4

echo -n "Checking if AD4_parameters.dat file in MGLTools needs modification..."
if [ ! -e $MGLTOOLS/AD4_parameters.dat.orig ] #enable MGLTools to work with metal ions
then
    cp $MGLTOOLS/AD4_parameters.dat $MGLTOOLS/AD4_parameters.dat.orig
    grep atom_par $vini_dir/AD4_parameters_for_metal_ions >> $MGLTOOLS/AD4_parameters.dat
    echo "parameters for metal ions added."
else
    echo "no need for modification. Parameters for metal ions are already present in AD4_parameters.dat file."
fi

read -e -p "Choose therapy level (1 for single drug therapy, 2 for two drugs therapy, etc. ) : " -i "1" therapy_level
echo ${therapy_level} > $WORKDIR/max_therapy_level


rm -rf $WORKDIR/$cancer_type$data
CANCER_PATHWAY=$ORGANISM$cancer_type                             #setting cancer pathway
mkdir -p $WORKDIR/${CANCER_PATHWAY}_results
cp $vini_dir/prep_prot_lig.py $WORKDIR
num_modes=9
echo $num_modes > $WORKDIR/num_modes
#read -e -p "Enter the number of Autodock Vina exhaustive searches. Press enter to accept the default : " -i "8" exhaustiveness
exhaustiveness=8
echo $exhaustiveness > $WORKDIR/exhaustiveness
box_size=40
echo ${box_size} > $WORKDIR/box_size
affinity=0.00 #In case of error we take zero binding energy
echo $affinity > $WORKDIR/random_affinity


read -e -p "Run Vini in debug mode (output will be redirected to the screen) (y/n)?. Press enter to accept the default (debug): " -i "y" mode
if  [ $mode == n ]
then
    nohup ./VelikaVini &
    echo "Vini will now continue to work in the background."
    echo "You can follow the progress of Vini by inspecting the nohup.out file in this folder."
else
    ./VelikaVini
fi
