# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_geomalgorithms', [dirname(__file__)])
        except ImportError:
            import _geomalgorithms
            return _geomalgorithms
        if fp is not None:
            try:
                _mod = imp.load_module('_geomalgorithms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _geomalgorithms = swig_import_helper()
    del swig_import_helper
else:
    import _geomalgorithms
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def triangleNormalsPerFace(v_data, t_data):
    return _geomalgorithms.triangleNormalsPerFace(v_data, t_data)
triangleNormalsPerFace = _geomalgorithms.triangleNormalsPerFace

def triangleNormalsPerVertex(v_data, t_data):
    return _geomalgorithms.triangleNormalsPerVertex(v_data, t_data)
triangleNormalsPerVertex = _geomalgorithms.triangleNormalsPerVertex

def triangleNormalsBoth(v_data, t_data):
    return _geomalgorithms.triangleNormalsBoth(v_data, t_data)
triangleNormalsBoth = _geomalgorithms.triangleNormalsBoth

def removeDuplicatedVertices(verts, faces, norms=0):
    return _geomalgorithms.removeDuplicatedVertices(verts, faces, norms)
removeDuplicatedVertices = _geomalgorithms.removeDuplicatedVertices

def computeRMSD(Coords, refCoords):
    return _geomalgorithms.computeRMSD(Coords, refCoords)
computeRMSD = _geomalgorithms.computeRMSD
def TriangleNormals(vertices, triangles, mode = "PER_FACE" ):
    import numpy
    if type(vertices) == numpy.ndarray:
        vertices = vertices.astype('f')
    if type(triangles) == numpy.ndarray:
        triangles = triangles.astype('i')

    if mode == "PER_FACE":
        return triangleNormalsPerFace(vertices, triangles)
    elif mode == "PER_VERTEX":
        return triangleNormalsPerVertex(vertices, triangles)  
    elif mode == "BOTH":
        return triangleNormalsBoth(vertices, triangles) 


def closest2D_Point_to_Line(P, L):
    return _geomalgorithms.closest2D_Point_to_Line(P, L)
closest2D_Point_to_Line = _geomalgorithms.closest2D_Point_to_Line

def dist_Point_to_Line(P, L):
    return _geomalgorithms.dist_Point_to_Line(P, L)
dist_Point_to_Line = _geomalgorithms.dist_Point_to_Line

def dist_Point_to_Segment(P, S):
    return _geomalgorithms.dist_Point_to_Segment(P, S)
dist_Point_to_Segment = _geomalgorithms.dist_Point_to_Segment

def pbase_Plane(P, PL):
    return _geomalgorithms.pbase_Plane(P, PL)
pbase_Plane = _geomalgorithms.pbase_Plane

def dist3D_Line_to_Line(L1, L2):
    return _geomalgorithms.dist3D_Line_to_Line(L1, L2)
dist3D_Line_to_Line = _geomalgorithms.dist3D_Line_to_Line

def dist3D_Segment_to_Segment(S1, S2):
    return _geomalgorithms.dist3D_Segment_to_Segment(S1, S2)
dist3D_Segment_to_Segment = _geomalgorithms.dist3D_Segment_to_Segment

def cpa_time(Tr1, Tr2):
    return _geomalgorithms.cpa_time(Tr1, Tr2)
cpa_time = _geomalgorithms.cpa_time

def cpa_distance(Tr1, Tr2):
    return _geomalgorithms.cpa_distance(Tr1, Tr2)
cpa_distance = _geomalgorithms.cpa_distance

def intersect2D_Segments(S1, S2):
    return _geomalgorithms.intersect2D_Segments(S1, S2)
intersect2D_Segments = _geomalgorithms.intersect2D_Segments

def inSegment(P, S):
    return _geomalgorithms.inSegment(P, S)
inSegment = _geomalgorithms.inSegment

def intersect3D_SegmentPlane(S, Pn):
    return _geomalgorithms.intersect3D_SegmentPlane(S, Pn)
intersect3D_SegmentPlane = _geomalgorithms.intersect3D_SegmentPlane

def intersect3D_2Planes(Pn1, Pn2):
    return _geomalgorithms.intersect3D_2Planes(Pn1, Pn2)
intersect3D_2Planes = _geomalgorithms.intersect3D_2Planes

def intersect_RayTriangle(R, T):
    return _geomalgorithms.intersect_RayTriangle(R, T)
intersect_RayTriangle = _geomalgorithms.intersect_RayTriangle
class Vert(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vert, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _geomalgorithms.Vert_x_set
    __swig_getmethods__["x"] = _geomalgorithms.Vert_x_get
    if _newclass:
        x = _swig_property(_geomalgorithms.Vert_x_get, _geomalgorithms.Vert_x_set)
    __swig_setmethods__["y"] = _geomalgorithms.Vert_y_set
    __swig_getmethods__["y"] = _geomalgorithms.Vert_y_get
    if _newclass:
        y = _swig_property(_geomalgorithms.Vert_y_get, _geomalgorithms.Vert_y_set)
    __swig_setmethods__["z"] = _geomalgorithms.Vert_z_set
    __swig_getmethods__["z"] = _geomalgorithms.Vert_z_get
    if _newclass:
        z = _swig_property(_geomalgorithms.Vert_z_get, _geomalgorithms.Vert_z_set)

    def __init__(self):
        this = _geomalgorithms.new_Vert()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _geomalgorithms.delete_Vert
    __del__ = lambda self: None
Vert_swigregister = _geomalgorithms.Vert_swigregister
Vert_swigregister(Vert)


def orientation2D_Polygon(n):
    return _geomalgorithms.orientation2D_Polygon(n)
orientation2D_Polygon = _geomalgorithms.orientation2D_Polygon

def area2D_Polygon(n):
    return _geomalgorithms.area2D_Polygon(n)
area2D_Polygon = _geomalgorithms.area2D_Polygon

def area3D_Polygon(n, N):
    return _geomalgorithms.area3D_Polygon(n, N)
area3D_Polygon = _geomalgorithms.area3D_Polygon

def fastBall(V, n, B):
    return _geomalgorithms.fastBall(V, n, B)
fastBall = _geomalgorithms.fastBall

def detectObjFileContent(aFilename, aoGroupNames, aoMaterialLibraries, aoMaterialNames):
    return _geomalgorithms.detectObjFileContent(aFilename, aoGroupNames, aoMaterialLibraries, aoMaterialNames)
detectObjFileContent = _geomalgorithms.detectObjFileContent

def readObjFileGroup(aFilename, aGroupName, aoMaterialNames, aoVertices, aoTriangles, aoTextureVertices, aoTextureTriangles, aoTriangleMaterialIndices):
    return _geomalgorithms.readObjFileGroup(aFilename, aGroupName, aoMaterialNames, aoVertices, aoTriangles, aoTextureVertices, aoTextureTriangles, aoTriangleMaterialIndices)
readObjFileGroup = _geomalgorithms.readObjFileGroup
# This file is compatible with both classic and new-style classes.


