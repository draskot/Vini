NULL=0
ONES=1

JSS=`cat $WORKDIR/JSS`
Vini_queue=`cat $WORKDIR/Vini_queue`
job_submit=`cat $WORKDIR/job_submit`
job_cancel=`cat $WORKDIR/job_cancel`

rm -f *.out
if [ $JSS == $ONES ]
then
    echo "#! /bin/bash"                           > cores
    echo "WORKDIR=$WORKDIR"                      >> cores
    echo "#SBATCH --job-name=cores"              >> cores
    echo "#SBATCH --output=cores.out"            >> cores
    echo "#SBATCH --time=00:00:60"               >> cores
    echo "#SBATCH --cpus-per-task=1"             >> cores
    echo "#SBATCH --mem=2gb"                     >> cores
    echo "#SBATCH --partition="$Vini_queue       >> cores
    chmod u+x                                       cores
else
    echo "#$ -q" $Vini_queue                     >> cores
    Vini_pe=`cat $WORKDIR/Vini_pe`
    echo "#! /bin/bash"                           > cores
    echo "WORKDIR=$WORKDIR"                      >> cores
    echo "#$ -N cores"                           >> cores
    echo "#$ -o cores.out"                       >> cores
    echo "#$ -e cores.out"                       >> cores
    echo "#$ -cwd"                               >> cores
    echo "#$ -V"                                 >> cores
    echo "#$ -l h_rt=60"                         >> cores
    echo "#$ -pe" $Vini_pe 1                     >> cores
    echo "#$ -l mem_free=2048"                   >> cores
    chmod u+x                                       cores
fi

echo "Trying to determine number of CPU cores per compute node. This may last for a while, please be patient."
echo "lscpu" >> cores
#echo "awk '/MemFree/ { printf "%.3f \n", $2/1024/1024 }' /proc/meminfo > $WORKDIR/memory" >> cores

$job_submit cores
timeout 30s $vini_dir/wait_until_jobs_finish #wait for job to finish maximum 30 seconds
if [ -e $vini_dir/*out ]
then
    grep "CPU(s)" *out > tmp ; CPUs=`head -1 tmp` ; CPUs=`echo $CPUs | awk '{print $2}'`
    grep "Thread(s)" *out > tmp ; Threads=`head -1 tmp` ; Threads=`echo $Threads | awk '{print $4}'`
    cores=`echo $CPUs $Threads | awk '{print $1 / $2}'` ; echo $cores > $WORKDIR/cores
    echo "found $cores CPU cores per compute node."
    memory=`cat $WORKDIR/memory`
    #echo "found $memory memory per compute node."
else
    $job_cancel -u $USER
    read -p "failed to get info about cores. Ask your admin and write number of cores per compute node here:" cores
    echo $cores > $WORKDIR/cores
    job_cancel=`cat $WORKDIR/job_cancel`
fi
rm -f *out cores

