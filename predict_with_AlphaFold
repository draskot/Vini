cpus=$1
partition=$2
base=$3
fasta_file=$4
outdir=$5



ONES=1
maxlines1=23
#maxlines2=40
maxlines2=42

model=`grep -c ">" ${fasta_file}`
if  [ $model -eq $ONES ]
then
    model=monomer
else
    model=multimer
fi

walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'` #By default we are trying to run AF on cpu nodes
antibody=`basename ${fasta_file} .fasta`
nolines=`wc -l < ${fasta_file}`                     #Checking resources for large sequences


if  [ $nolines -le $maxlines1 ]   
then
    partition=`cat cpu_partition`
    walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'`
    excluded_nodes=`cat excluded_${partition}_nodes`
    echo "#!/bin/bash"                                                   > $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --time=$walltime"                                     >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --job-name=$antibody"                                 >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --account=$SLURMACCT"                                 >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --exclusive"                                          >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --output=$WORKDIR/$antibody.out"                      >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --error=$WORKDIR/$antibody.err"                       >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --nodes=1"                                            >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --ntasks-per-node=1"                                  >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --cpus-per-task="$cpus                                >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --partition="$partition                               >> $WORKDIR/AlphaFold_${antibody}
    echo "#SBATCH --exclude=${excluded_nodes}"                          >> $WORKDIR/AlphaFold_${antibody}
    echo "WORKDIR=${WORKDIR}"                                           >> $WORKDIR/AlphaFold_${antibody}
else
    if  [ $nolines -le $maxlines2 ]
    then
        partition=`cat longcpu_partition`
        walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'`
        #excluded_nodes=`cat excluded_${partition}_nodes`
        excluded_nodes=`cat excluded_cpu_nodes`
        echo "#!/bin/bash"                                                   > $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --time=$walltime"                                     >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --job-name=$antibody"                                 >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --account=$SLURMACCT"                                 >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --exclusive"                                          >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --output=$WORKDIR/$antibody.out"                      >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --error=$WORKDIR/$antibody.err"                       >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --nodes=1"                                            >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --ntasks-per-node=1"                                  >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --cpus-per-task="$cpus                                >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --partition="$partition                               >> $WORKDIR/AlphaFold_${antibody}
        echo "#SBATCH --exclude=${excluded_nodes}"                         >> $WORKDIR/AlphaFold_${antibody}
        echo "WORKDIR=${WORKDIR}"                                           >> $WORKDIR/AlphaFold_${antibody}
    else
        partition=`cat longcpu_partition`
        walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'`
        echo "Error while trying to predict $antibody structure with AlphaFold."                        >> Vini.crashlog
        echo "Running AlphaFold prediction on $partition node will exceed walltime limit of $walltime." >> Vini.crashlog
        echo "Use SWISS-MODEL to predict $vini_dir/genes/fasta_files/${antibody}.fasta structure"       >> Vini.crashlog
        echo "Then put ${antibody}.pdb in $vini_dir/genes/pdb_files folder and start Vini again."       >> Vini.crashlog
        if [ -s masterpid ]
        then
            scancel -u $USER
            masterpid=`cat masterpid`
            kill -9 $masterpid
        else
            echo "Error while trying to predict $antibody structure with AlphaFold."  
            echo "Running AlphaFold prediction on $partition node will exceed walltime limit of $walltime." 
            echo "Use SWISS-MODEL to predict $vini_dir/genes/fasta_files/${antibody}.fasta structure"       
            echo "Then put ${antibody}.pdb in $vini_dir/genes/pdb_files folder and start Vini again."       
            echo "exit now with Ctrl-C." ; sleep 1000
        fi
    fi
fi

#gpus=1                                                   #AlphaFold working with only 1 gpu
#excluded_nodes=`cat excluded_${partition}_nodes`
#if  [[ $partition == gpu ]] && [[ -e /etc/slurm/gres.conf ]]
#then
#    echo "#SBATCH --gres=gpu:1"                                     >> $WORKDIR/AlphaFold_${antibody}
#fi

echo "source $INSTALL/miniconda3/bin/activate" >> $WORKDIR/AlphaFold_${antibody}
echo "conda activate env310"  >> $WORKDIR/AlphaFold_${antibody}
echo "alphafold --data_dir=${ALPHAFOLD_DATA_DIR} --fasta_paths=${fasta_file} --output_dir=${WORKDIR} --model_preset=${model} --db_preset=${base} --use_gpu_relax=False --num_multimer_predictions_per_model=1  --max_template_date=2020-06-05"                  >> $WORKDIR/AlphaFold_${antibody}
echo "conda deactivate"  >> $WORKDIR/AlphaFold_${antibody}
echo "if [ -e $WORKDIR/${antibody}/ranked_0.pdb ]"         >> $WORKDIR/AlphaFold_${antibody}
echo "then"                                                >> $WORKDIR/AlphaFold_${antibody}
echo "    cp $WORKDIR/${antibody}/ranked_0.pdb $outdir/${antibody}.pdb" >> $WORKDIR/AlphaFold_${antibody}
echo "else"                                                >> $WORKDIR/AlphaFold_${antibody}
echo "    echo ${antibody} > $WORKDIR/failed_predictions"      >> $WORKDIR/AlphaFold_${antibody}
echo "fi"                                                  >> $WORKDIR/AlphaFold_${antibody}
chmod u+x                                                     $WORKDIR/AlphaFold_${antibody}


rm -rf $WORKDIR/${antibody} #cleanup
job_submit=`cat job_submit`


${job_submit} $WORKDIR/AlphaFold_${antibody}
#job_id=`${job_submit} $WORKDIR/AlphaFold_${antibody} | awk '{print $4}'`
#squeue -u | grep ${job_id} | grep  launch failed

