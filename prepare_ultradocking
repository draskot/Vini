UDIR=$WORKDIR/ultradock_data
DOWNLOAD_DIR=$vini_dir/genes/pdb_files
NULL=0
ones=1
two=2
PDB=.pdb
KEGG_entry_id=0
KEGG_gene_name=0

rm -rf $UDIR/docking.pairs $UDIR/docking_pairs.tmp $UDIR/Uniprot_ID_list
mkdir -p $UDIR
cp $HOME/adock30_7.zip $UDIR
unzip -qo $UDIR/adock30_7.zip -d $UDIR

rm -rf $UDIR/chimeric_ligands
mkdir -p $UDIR/chimeric_ligands

cp $UDIR/adock30_7/adock_ligands/* $UDIR/chimeric_ligands

grep -v HETATM $HOME/1AKI.pdb > $UDIR/1AKI_clean.pdb #prepare faked protein

if [ ! -e $UDIR/missing_structures   ]  #create lists if not exist
then
    > $UDIR/missing_structures
fi
if [ ! -e $UDIR/predicted_structures   ]
then
    > $UDIR/predicted_structures
fi
if [ ! -e $UDIR/confirmed_structures   ]
then
    > $UDIR/confirmed_structures
fi

> $UDIR/ligands_list
> $UDIR/Uniprot_ID_list
> $UDIR/docking_pairs.tmp

cp $HOME/adock_pkd.csv $UDIR/adock_pkd.csv  #prepare input file
dos2unix -q $UDIR/adock_pkd.csv
cat $UDIR/adock_pkd.csv | tr  ',' ' ' > $WORKDIR/tmp #convert csv to text file
cat $WORKDIR/tmp | tr  '"' ' ' > $UDIR/adock_pkd
awk '!seen[$0]++' $UDIR/adock_pkd > $WORKDIR/tmp ; mv $WORKDIR/tmp $UDIR/adock_pkd #remove duplicate lines

docking_pairs=`wc -l < $UDIR/adock_pkd`
echo -n "there are" $docking_pairs "pairs available for the evaluation. accept (y) or enter new value:" 
read value
if [ $value == "y" ]
then
    echo $docking_pairs "protein-ligand pairs will be evaluated."
else
    docking_pairs=$value ; echo $docking_pairs "protein-ligand pairs will be evaluated."
fi
echo -n "Preparing initial environment. This may take a while, please wait..."


head -$docking_pairs $UDIR/adock_pkd > $UDIR/docking_pairs 

let "docking_pairs++" ; n=1                    #create ligand and receptor lists
for (( j=1; j<$docking_pairs; j++ ))
do
    line=`head -"$j" $UDIR/docking_pairs | tail -1`
    ligand=`echo $line | awk '{print $1}'`
    grep $ligand $UDIR/ligands_list > $WORKDIR/tmp #if not already there, put compound name in the ligands list
    chars=`wc -c < $WORKDIR/tmp`
    if  [ $chars -eq $NULL ] 
    then
        printf "%s%s%s\n"  "$ligand" " " "S" >> $UDIR/ligands_list
    fi

#debug
while read -r line
do
    pubchem_id=`echo $line | awk '{print $1}'`
    if  [ ! -e $vini_dir/ligands/pdb_files/$pubchem_id$PDB ] #if not in the compound repo, download the structure from PubChem
    then
        sh download_substance_structure ${pubchem_id} ${DOWNLOAD_DIR} #try to download structure from Pubchem
        echo "trying to download compound structure from PubChem..."
        if  [ -e $DOWNLOAD_DIR/$pubchem_id$PDB ]
        then
            echo "success."
        else
            echo "failed." ; break
        fi

    fi
done < $vini_dir/ligands/ligands_list
#enddebug


    

    receptor=`echo $line | awk '{print $2}'`
    grep $receptor $UDIR/Uniprot_ID_list > $WORKDIR/tmp
    chars=`wc -c < $WORKDIR/tmp`
    if  [ $chars -eq $NULL ] #if not already there, put receptor in Uniprot_ID_list
    then
        printf "%s%s%s\n"  "$n" " " "$receptor" >> $UDIR/Uniprot_ID_list
        let "n++"
    fi
    echo -n "."
done     
echo "done."

rm $WORKDIR/tmp



cp $UDIR/ligands_list $vini_dir/ligands/ligands_list
cp $UDIR/chimeric_ligands/* $vini_dir/ligands/pdb_files

lineno=`wc -l < $UDIR/Uniprot_ID_list` #preparing protein structure files
let "lineno++"
for (( j=1; j<$lineno; j++ )) #obtain structure files from Uniprot IDs
do
    uniprot_id=`head -"$j" $UDIR/Uniprot_ID_list | tail -1`
    uniprot_id=`echo $uniprot_id | awk '{print $2}'`
    line=`grep $uniprot_id $vini_dir/uniprot_db`
    nowords=`echo $line | wc -w`
    if  [ $nowords -eq $two ]
    then
        echo -n $uniprot_id "is without the structure. Checking if in repo..."
        if  [ -e $DOWNLOAD_DIR/$uniprot_id$PDB ]
        then
            chars=`grep -w $uniprot_id $UDIR/predicted_structures` #check if the protein is in predicted_structures
            echo $chars > $WORKDIR/tmp 
            chars=`wc -c < $WORKDIR/tmp`
            if  [ $chars -ne $ones ]
            then
                echo "yes and predicted. Adding" $uniprot_id "to" $WORKDIR/receptors_contracted "list with P flag."
                printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "P" >> $WORKDIR/receptors_contracted
            else
                echo -n "yes. Checking status..."
                rm -f $DOWNLOAD_DIR/$uniprot_id$PDB
                drugname=0
                sh predict_protein_structure ${DOWNLOAD_DIR} ${uniprot_id} ${drugname}
                if  [ -e $DOWNLOAD_DIR/$uniprot_id$PDB ] #check if the prediction was successful
                then
                    printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "P" >> $WORKDIR/receptors_contracted 
                    echo $uniprot_id >> $UDIR/predicted_structures
                    echo "success." $uniprot_id "was added to" $WORKDIR/receptors_contracted "list with P flag."
                else
                    printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "F" >> $WORKDIR/receptors_contracted
                    cp $UDIR/1AKI_clean.pdb $DOWNLOAD_DIR/$uniprot_id$PDB
                    chars=`grep -w $uniprot_id $UDIR/missing_structures` #update missing_structures file if not there
                    echo $chars > $WORKDIR/tmp ; chars=`wc -c < $WORKDIR/tmp`
                    if  [ $chars -eq $ones ]
                    then
                        echo $uniprot_id >> $UDIR/missing_structures
                    fi
                    echo "failed." $uniprot_id "was added to" $WORKDIR/receptors_contracted "list with F flag."
                fi
            fi
        else
            echo "no. Trying to predict the structure..."
            drugname=0
            sh predict_protein_structure ${DOWNLOAD_DIR} ${uniprot_id} ${drugname}
            if  [ -e $DOWNLOAD_DIR/$uniprot_id$PDB ] #check if the prediction was successful
            then
                echo "success."
                printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "P" >> $WORKDIR/receptors_contracted
                chars=`grep -w $uniprot_id $UDIR/predicted_structures` #check if the protein is in predicted_structures
                echo $chars > $WORKDIR/tmp ; chars=`wc -c < $WORKDIR/tmp`
                if  [ $chars -eq $ones ]
                then
                    echo $uniprot_id >> $UDIR/predicted_structures
                fi
            else
                cp $UDIR/1AKI_clean.pdb $DOWNLOAD_DIR/$uniprot_id$PDB
                    chars=`grep -w $uniprot_id $UDIR/missing_structures` #update missing_structures file if not there
                    echo $chars > $WORKDIR/tmp ; chars=`wc -c < $WORKDIR/tmp`
                    if  [ $chars -eq $ones ]
                    then
                        echo $uniprot_id >> $UDIR/missing_structures
                    fi
                    printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "F" >> $WORKDIR/receptors_contracted
                    echo "failed." $uniprot_id "was added to" $WORKDIR/receptors_contracted "list with F flag."
            fi
        fi
    else                 
        echo -n $uniprot_id "has the structure. Checking if in repository..."


        if  [ -e $DOWNLOAD_DIR/$uniprot_id$PDB ] 
        then 
            printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "E" >> $WORKDIR/receptors_contracted
            chars=`grep -w $uniprot_id $UDIR/confirmed_structures` #update missing_structures file if not there
            echo $chars > $WORKDIR/tmp ; chars=`wc -c < $WORKDIR/tmp`
            if  [ $chars -eq $ones ]
            then
                echo $uniprot_id >> $UDIR/confirmed_structures
            fi
            echo "yes." $uniprot_id "was added to" $WORKDIR/receptors_contracted "list with E flag."
        else
            echo "no. Trying to download" $uniprot_id "structure from RCSB..."
            sh create_completeness_list ${uniprot_id}
            noentries=`wc -l < $WORKDIR/completeness_list`
            if  [ $noentries -ne $NULL ]
            then
                sh prepare_protein ${uniprot_id} #clean protein &  add missing residues
                if  [ -e $DOWNLOAD_DIR/$uniprot_id$PDB ] #check if download was succesful
                then
                    echo "success. Adding" $uniprot_id "to" $WORKDIR/receptors_contracted "list with E flag."
                    printf "%s%s%s%s%s%s%s\n"  "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "E" >> $WORKDIR/receptors_contracted
                else
                    echo "failed. Adding" $uniprot_id "to" $WORKDIR/receptors_contracted "list with F flag."
                    grep -v HETATM $HOME/1AKI.pdb > $DOWNLOAD_DIR/$uniprot_id$PDB #prepare faked protein
                    printf "%s%s%s%s%s%s%s\n"  "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "F" >> $WORKDIR/receptors_contracted
                fi
            else
                echo -n "no single model found. Trying to predict the protein structure..."
                drugname=0
                sh predict_protein_structure ${DOWNLOAD_DIR} ${uniprot_id} ${drugname}
                if  [ -e $DOWNLOAD_DIR/$uniprot_id$PDB ] #check if the prediction was successful
                then
                    echo "success. Adding" $uniprot_id "to" $WORKDIR/receptors_contracted "list with P flag."
                    printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "P" >> $WORKDIR/receptors_contracted
                else
                    echo "failed. Adding" $uniprot_id "to" $WORKDIR/receptors_contracted "list with F flag."
                    printf "%s%s%s%s%s%s%s\n" "$KEGG_entry_id" " " "$KEGG_gene_name" " " "$uniprot_id" " " "F" >> $WORKDIR/receptors_contracted
                    echo "Adding faked protein 1AKI to the repo instead."
                    grep -v HETATM $HOME/1AKI.pdb > $DOWNLOAD_DIR/$uniprot_id$PDB #prepare faked protein
                fi
            fi
        fi  
    fi
done

rm -rf $UDIR/adock30_7   #cleanup
#rm $UDIR/adock30_7.zip
