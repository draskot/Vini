source $vini_dir/globals


job_status=`cat job_status`       
job_submit=`cat job_submit`
partition=`cat cpu_partition`
walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'` #By default we are running Vini jobs on cpu nodes
excluded_nodes=`cat excluded_${partition}_nodes`
receptors=`wc -l < $WORKDIR/receptors_contracted`
ligands=`wc -l < $vini_dir/ligands/ligands_list`
nr_ligands=`wc -l < $vini_dir/ligands/ligands_list`
nr_complexes=`cat $WORKDIR/nr_complexes`
DIR=$WORKDIR/${cancer_type}_data
therapy_level=`cat $vini_dir/therapy_level`

mkdir -p $WORKDIR/${CANCER_PATHWAY}_results #Create directory for results
cd $WORKDIR


L1=1; L2=1; L3=1; L4=1;                 #Initializing main loops
case $therapy_level in
     1) L4=$nr_ligands ;;
     2) L3=$nr_ligands; L4=$nr_ligands ;;
     3) L2=$nr_ligands; L3=$nr_ligands; L4=$nr_ligands ;;
     4) L1=$nr_ligands; L2=$nr_ligands; L3=$nr_ligands; L4=$nr_ligands ;;
esac

data_dir=$WORKDIR/${cancer_type}_data
ligand_number=1                #initializing ligand index
SECONDS=$NULL

echo "Calculating free binding energies for therapy level ${therapy_level}. This may take a while, please be patient."

for (( I=1; I<$((L1+1)); I++ )) #1st loop - 4th therapy level
do
    for (( J=1; J<$((L2+1)); J++ )) #2nd loop -3rd therapy level
    do
         for (( L=1; L<$((L3+1)); L++ )) #3rd loop -2nd thl
         do
             for (( M=1; M<$((L4+1)); M++ )) #4th loop - 1st thl
             do
                 printf -v lig_index "%03d" $M  

                case $therapy_level in
                     #1) comp_source=$DIR;          target_dir=$DIR/$M ;;
                     #2) comp_source=$DIR/$M;       target_dir=$DIR/$M/$L ;;
                     #3) comp_source=$DIR/$M/$L;    target_dir=$DIR/$M/$L/$J ;;
                     #4) comp_source=$DIR/$M/$L/$J; target_dir=$DIR/$M/$L/$J/$I ;;
                     1) eval comp_source_$M_$L_$J_$I=$DIR;           eval target_dir_$M_$L_$J_$I=$DIR/$M ;;
                     2) eval comp_source_$M_$L_$J_$I=$DIR/$M;        eval target_dir_$M_$L_$J_$I=$DIR/$M/$L ;;
                     3) eval comp_source_$M_$L_$J_$I=$DIR/$M/$L;     eval target_dir_$M_$L_$J_$I=$DIR/$M/$L/$J ;;
                     4) eval comp_source_$M_$L_$J_$I=$DIR/$M/$L/$J;  eval target_dir=$M_$L_$J_$I=$DIR/$M/$L/$J/$I ;;
                 esac
                 
                 eval echo \$comp_source_$M_$L_$J_$I > $WORKDIR/comp_source_$M_$L_$J_$I
                 eval echo \$target_dir_$M_$L_$J_$I  > $WORKDIR/target_dir_$M_$L_$J_$I
                 comp_source=`cat $WORKDIR/comp_source_$M_$L_$J_$I`
                 target_dir=`cat $WORKDIR/target_dir_$M_$L_$J_$I`

                 mkdir -p $comp_source $target_dir # nr. of target dirs equals nr. of ligands
                 for (( N=1; N<$((nr_complexes+1)); N++ )) #5th loop
       	         do
                     printf -v n "%03d" $N
                     comp_index=$n
                     eval comp_index_$M_$L_$J_$I=$n
                     eval echo \$comp_index_$M_$L_$J_$I > $WORKDIR/comp_index_$M_$L_$J_$I
                     comp_index=`cat $WORKDIR/comp_index_$M_$L_$J_$I`
                     conf_index=$comp_index
                     log_index=$comp_index

                     line=`head -"$ligand_number" $vini_dir/ligands/ligands_list | tail -1`
                     drug=`echo $line | awk -F',' '{print $1}'`
                     drugtype=`echo $line | awk -F','  '{print $2}'`

                     mkdir -p $WORKDIR/${comp_index}_${I}_${J}_${L}_${M}
                     cd $WORKDIR/${comp_index}_${I}_${J}_${L}_${M}   #move to the working area
                     rm -rf *

                     if [ $drugtype == P ] #get ligand
                     then
                         cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdb ./
                     else
                         cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdbqt ./
                     fi

                     if  [ ! -e $comp_source/complex_${comp_index}.pdb ]
                     then
                         echo "ERROR" > $target_dir/log_${comp_index}
                     else
                         cp $comp_source/complex_${comp_index}.pdb $vini_dir/modify_chain_id.py $vini_dir/update_pdb.py $vini_dir/extract_affinity.py ./ 
                         if  [ $drugtype == S ]
                         then                                               #drug is a small molecule - using Vina or ADT
                             UNKN1=`grep -w PT ligand_${lig_index}.pdbqt | awk '{print $3}'`
                             UNKN2=`grep -w B ligand_${lig_index}.pdbqt | awk '{print $3}'`
                             if  [[ -z $UNKN1 ]] && [[ -z $UNKN2 ]] #No metal ions, using Autodock Vina
                             then
                                 echo "#!/bin/bash"                                                            > dock  
                                 echo "#SBATCH --time="$walltime                                              >> dock
                                 echo "#SBATCH --account=$SLURMACCT"                                          >> dock
                                 echo "#SBATCH --partition="$partition                                        >> dock
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                   >> dock
                                 echo "#SBATCH --job-name=D${M}.${N}"                                         >> dock
                                 echo "#SBATCH --output=D${M}.${N}.out"                                       >> dock
                                 echo "#SBATCH --error=D${M}.${N}.err"                                        >> dock
                                 echo "#SBATCH --nodes=1"                                                     >> dock
                                 echo "#SBATCH --ntasks=1"                                                    >> dock
                                 echo "#SBATCH --cpus-per-task="$threads                                      >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt" >> dock
                                 echo "cp $MGLTOOLS/AD4_parameters.dat ./"                                    >> dock
                                 echo "cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdbqt ./"                >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt" >> dock
                                 echo "sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index}" >> dock
                                 echo "vina --cpu $threads --size_x 40 --size_y 40 --size_z 40 --config conf_$conf_index.txt --exhaustiveness ${exhaustiveness} --receptor complex_${comp_index}.pdbqt --ligand ligand_${lig_index}.pdbqt --out ligand.pdbqt > log" >> dock
                                 echo "if  [ -e ligand.pdbqt ]"                                                 >> dock
                                 echo "then"                                                                    >> dock
                                 echo "    obabel -ipdbqt complex_${comp_index}.pdbqt -O complex_${comp_index}.pdb" >> dock
                                 echo "    infile=complex_${comp_index}.pdb"                                    >> dock #get last ATOM/HETATM number from receptor
                                 echo "    last_order_number=\$(awk '/^(ATOM|HETATM)/{order=\$2} END{print order}' "\${infile}")" >> dock
                                 echo "    obabel -ipdbqt ligand.pdbqt -O tmp.pdb"                              >> dock
                                 echo "    grep -we HETATM -we END tmp.pdb > ligand.pdb"                        >> dock
                                 echo "    chain_id=\`grep -m 1 "ATOM" complex_${comp_index}.pdb | awk '{print \$5}'\`" >> dock
                                 echo "    python3 modify_chain_id.py ligand.pdb tmp \$chain_id"                >> dock
                                 echo "    python3 update_pdb.py \$last_order_number tmp ligand.pdb"            >> dock  #modify ATOM numbers
                                 echo "    sed -i -e "s/UNL/$ligand/" ligand.pdb"                               >> dock
                                 echo "    cat complex_${comp_index}.pdb > tmp"                                 >> dock
                                 echo "    cat ligand.pdb >> tmp"                                               >> dock
                                 echo "    grep -we ATOM -we HETATM tmp > $target_dir/complex_${comp_index}.pdb" >> dock
                                 echo "    python3 extract_affinity.py ${target_dir}/log_${comp_index}"         >> dock
                                 echo "else"                                                                    >> dock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                          >> dock
                                 echo "fi"                                                                      >> dock
                             else        #Using Autodock 4
                                 if  [ ! -z $UNKN1 ]
                                 then
                                     grep -w Pt $vini_dir/AD4_parameters_for_metal_ions > param_file
                                 else  
                                     grep -w B $vini_dir/AD4_parameters_for_metal_ions > param_file
                                 fi
                                 echo "#!/bin/bash"                                                            > dock  
                                 echo "#SBATCH --time="$walltime                                              >> dock
                                 echo "#SBATCH --account=$SLURMACCT"                                          >> dock
                                 echo "#SBATCH --partition="$partition                                        >> dock
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                   >> dock
                                 echo "#SBATCH --job-name=D${M}.${N}"                                         >> dock
                                 echo "#SBATCH --output=D${M}.${N}.out"                                       >> dock
                                 echo "#SBATCH --error=D${M}.${N}.err"                                        >> dock
                                 echo "#SBATCH --nodes=1"                                                     >> dock
                                 echo "#SBATCH --ntasks=1"                                                   >> dock
                                 echo "#SBATCH --cpus-per-task="$threads                                     >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt" >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf4.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt -o complex_${comp_index}.gpf" >> dock
                                 echo "echo "parameter_file param_file" > tmp"                                      >> dock
                                 echo "cat complex_${comp_index}.gpf >> tmp"                                        >> dock
                                 echo "mv tmp complex_${comp_index}.gpf"                                            >> dock
                                 echo "autogrid4 -p complex_${comp_index}.gpf -l complex_${comp_index}.glg"         >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_dpf42.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt -o complex_${comp_index}.dpf" >> dock
                                 echo "echo "parameter_file param_file" > tmp"                                      >> dock
                                 echo "cat complex_${comp_index}.dpf >> tmp"                                        >> dock
                                 echo "mv tmp complex_${comp_index}.dpf"                                            >> dock
                                 echo "autodock4 -p complex_${comp_index}.dpf -l complex_${comp_index}.log"         >> dock
                                 echo "python3 $vini_dir/extract_docked_ligand_coordinates.py complex_${comp_index}.log ligand_${lig_index}.pdbqt"   >> adock
                                 echo "cat complex_${comp_index}.pdbqt > COMPLEX.pdbqt"                             >> dock
                                 echo "cat ligand_${lig_index}.pdbqt  >> COMPLEX.pdbqt"                             >> dock
                                 echo "if  [ -e COMPLEX.pdbqt ]"                                                    >> dock
                                 echo "then"                                                                        >> dock
                                 echo "    obabel -ipdbqt COMPLEX.pdbqt -O $target_dir/complex_${comp_index}.pdb"   >> dock
                                 echo "    grep  \"DOCKED: USER \" complex_${comp_index}.log | grep  \"Estimated Free Energy of Binding \" | sort -k2 -n > tmp" >> dock
                                 echo "    a=\`head -1 tmp | awk '{print \$9}'\`"                                   >> dock
                                 echo "    if  awk \"BEGIN {exit !(\$a > 0)}\""                                     >> dock
                                 echo "    then"                                                                    >> dock
                                 echo "        echo ERROR > $target_dir/log_${comp_index}"                          >> dock
                                 echo "    else"                                                                    >> dock
                                 echo "        echo \$a > $target_dir/log_${comp_index}"                            >> dock
                                 echo "    fi"                                                                      >> dock
                                 echo "else"                                                                        >> dock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                              >> dock
                                 echo "fi"                                                                          >> dock
                             fi
                         else                             #drug is a mAb - checking if complex is compound     
                             grep HETATM complex_${comp_index}.pdb > tmp
                             if  [ -s tmp ]             #if complex is a compound swap ligand_receptor and run Vina
                             then                                         
                                 echo "#!/bin/bash"                                                            > dock  
                                 echo "#SBATCH --time="$walltime                                              >> dock
                                 echo "#SBATCH --account=$SLURMACCT"                                          >> dock
                                 echo "#SBATCH --partition="$partition                                        >> dock
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                   >> dock
                                 echo "#SBATCH --job-name=D${M}.${N}"                                         >> dock
                                 echo "#SBATCH --output=D${M}.${N}.out"                                       >> dock
                                 echo "#SBATCH --error=D${M}.${N}.err"                                        >> dock
                                 echo "#SBATCH --nodes=1"                                                     >> dock
                                 echo "#SBATCH --ntasks=1"                                                    >> dock
                                 echo "#SBATCH --cpus-per-task="$threads                                      >> dock
                                 echo "mv complex_${comp_index}.pdb tmp"                                      >> dock
                                 echo "mv ligand_${lig_index}.pdb complex_${comp_index}.pdb"                  >> dock
                                 echo "mv tmp ligand_${lig_index}.pdb"                                        >> dock
                                 echo "touch ${target_dir}/Vina"                                              >> dock
                                 echo "cp $MGLTOOLS/AD4_parameters.dat ./"                                    >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt" >> dock
                                 echo "$MGLBIN/pythonsh $MGLTOOLS/Utilities24/prepare_ligand4.py -l ligand_${lig_index}.pdb -o ligand_${lig_index}.pdbqt" >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt" >> dock
                                 echo "sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index}" >> dock
                                 echo "vina --cpu $threads --size_x 40 --size_y 40 --size_z 40 --config conf_$conf_index.txt --exhaustiveness ${exhaustiveness} --receptor complex_${comp_index}.pdbqt --ligand ligand_${lig_index}.pdbqt --out ligand.pdbqt > log" >> dock
                                 echo "if  [ -e ligand.pdbqt ]"                                               >> dock
                                 echo "then"                                                                  >> dock
                                 echo "    obabel -ipdbqt complex_${comp_index}.pdbqt -O complex_${comp_index}.pdb" >> dock
                                 echo "    infile=complex_${comp_index}.pdb"                                  >> dock #get last ATOM/HETATM number from receptor
                                 echo "    last_order_number=\$(awk '/^(ATOM|HETATM)/{order=\$2} END{print order}' "\${infile}")" >> vdock
                                 echo "    obabel -ipdbqt ligand.pdbqt -O tmp.pdb"                            >> dock
                                 echo "    grep -we HETATM -we END tmp.pdb > ligand.pdb"                      >> dock
                                 echo "    chain_id=\`grep -m 1 "ATOM" complex_${comp_index}.pdb | awk '{print \$5}'\`" >> dock
                                 echo "    python3 modify_chain_id.py ligand.pdb tmp \$chain_id"              >> dock
                                 echo "    python3 update_pdb.py \$last_order_number tmp ligand.pdb"          >> dock  #modify ATOM numbers
                                 echo "    sed -i -e "s/UNL/$ligand/" ligand.pdb"                             >> dock
                                 echo "    cat complex_${comp_index}.pdb > tmp"                               >> dock
                                 echo "    cat ligand.pdb >> tmp"                                             >> dock
                                 echo "    grep -we ATOM -we HETATM tmp > $target_dir/complex_${comp_index}.pdb" >> dock
                                 echo  "    python3 extract_affinity.py ${target_dir}/log_${comp_index}"        >> dock
                                 echo "else"                                                                  >> dock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                        >> dock
                                 echo "fi"                                                                    >> dock
                             else                                             #using Rosetta
                                 echo "#!/bin/bash"                                                            > dock  
                                 echo "#SBATCH --time="$walltime                                              >> dock
                                 echo "#SBATCH --account=$SLURMACCT"                                          >> dock
                                 echo "#SBATCH --partition="$partition                                        >> dock
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                   >> dock
                                 echo "#SBATCH --job-name=D${M}.${N}"                                         >> dock
                                 echo "#SBATCH --output=D${M}.${N}.out"                                       >> dock
                                 echo "#SBATCH --error=D${M}.${N}.err"                                        >> dock
                                 echo "#SBATCH --nodes=1"                                                     >> dock
                                 echo "#SBATCH --ntasks-per-node="$threads                                     >> dock
                                 echo "#SBATCH --cpus-per-task=1"                                              >> dock
                                 echo "cp $vini_dir/flag_input_relax $vini_dir/docking.mac ./"                 >> dock
                                 echo "cp $vini_dir/analyze_chains.py ./"                                      >> dock
                                 echo "cp $ROSETTA_TOOLS/amino_acids.py ./"                                    >> dock
                                 echo "cp $ROSETTA_PUB/clean_pdb_keep_ligand.py ./"                            >> dock
                                 echo "source $INSTALL/miniconda2/bin/activate"                                >> dock
                                 echo "python clean_pdb_keep_ligand.py complex_${comp_index}.pdb -ignorechain" >> dock
                                 echo "mv complex_${comp_index}.pdb_00.pdb complex_${comp_index}.pdb"          >> dock
                                 echo "conda deactivate"                                                       >> dock
                                 echo "python3 analyze_chains.py ${comp_index} ${lig_index}"                   >> dock
                                 echo "module purge"                                                           >> dock
                                 echo "module load libGLU/9.0.2-GCCcore-11.3.0"                                >> dock
                                 echo "module load OpenMPI/4.1.1-GCC-11.2.0"                                   >> dock
                                 echo "cp complex_${comp_index}.pdb receptor.pdb"                              >> dock
                                 echo "cp ligand_${lig_index}.pdb ligand.pdb"                                  >> dock
                                 echo "cp $vini_dir/docking.mac ./"                                            >> dock
                                 echo "hex -batch receptor.pdb ligand.pdb < docking.mac > docking.log"         >> dock
                                 echo "cp complex.pdb complex_${comp_index}.pdb"                               >> dock
                                 echo "mpirun -np $threads $ROSETTA/source/bin/relax.mpi.linuxgccrelease -in:file:s complex_${comp_index}.pdb @flag_input_relax -overwrite" >> dock
                                 echo "mpirun -np $threads $ROSETTA/source/bin/docking_protocol.mpi.linuxgccrelease -in:file:s complex_${comp_index}_0002.pdb @flag_global_docking" >> dock
                                 echo "if [ -e ROSETTA_CRASH.log ]"                                            >> dock
                                 echo "then"                                                                   >> dock
                                 echo "    echo "ERROR" > $target_dir/log_${comp_index}"                       >> dock
                                 echo "else"                                                                   >> dock
                                 echo "    cp complex_${comp_index}_0002_0001.pdb $target_dir/complex_${comp_index}.pdb" >> dock
                                 echo "    string=\`grep partners flag_global_docking\`"                       >> dock
                                 echo "    read -r p1 p2 <<< \$(echo "\$string" | awk '{split(\$2, arr, \"_\"); print arr[1], arr[2]}')" >> dock
                                 echo "    mpirun -np $threads $ROSETTA/source/bin/InterfaceAnalyzer.mpi.linuxgccrelease -s complex_${comp_index}_0002_0001.pdb -interface \${p1}_\${p2} -out:file:score_only interface.sc -compute_packstat  -packstat::oversample 100 -overwrite" >> dock
                                 echo "    score=\`tail -1 interface.sc | awk '{print \$6}'\`"                 >> dock
                                 echo "    if  [ -z \${score} ] ; then"                                        >> dock
                                 echo "        echo ERROR > $target_dir/log_${comp_index}"                     >> dock
                                 echo "    else"                                                               >> dock
                                 echo "        echo \${score} > $target_dir/log_${comp_index}"                 >> dock
                                 echo "    fi"                                                                 >> dock
                                 echo "fi"                                                                     >> dock
                             fi
                         fi
                     fi
                 sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                 chmod u+x dock

                 input_list=NONE                                    #generate sbatch command
                 out_list=$WORKDIR/dockidlist_${I}_${J}_${L}_${M}
                 slurm_script=dock
                 output_command_file=$WORKDIR/dock_${I}_${J}_${L}_${M}
                 sh $vini_dir/generate_sbatch_command.sh ${input_list} ${out_list} ${slurm_script} ${output_command_file} $I $J $L $M
                 chmod u+x $WORKDIR/dock_${I}_${J}_${L}_${M}
                 sh $WORKDIR/dock_${I}_${J}_${L}_${M}                                   #submit 
    	         done # end of 5th loop
echo $I > $target_dir/I
echo $J > $target_dir/J
echo $L > $target_dir/L
echo $M > $target_dir/M

                 echo $target_dir > $target_dir/target_dir
                 echo ${therapy_level} > $WORKDIR/therapy_level    #Computing SLEM 
                 echo "#!/bin/bash"                                           > ${target_dir}/SLEM
                 echo "#SBATCH --time="$walltime                             >> ${target_dir}/SLEM
                 echo "#SBATCH --account=$SLURMACCT"                         >> ${target_dir}/SLEM
                 echo "#SBATCH --partition="$partition                       >> ${target_dir}/SLEM
                 echo "#SBATCH --ntasks=1"                                   >> ${target_dir}/SLEM
                 echo "#SBATCH --cpus-per-task=1"                            >> ${target_dir}/SLEM
                 echo "#SBATCH --job-name=SLEM"                              >> ${target_dir}/SLEM
                 echo "#SBATCH --output=${target_dir}/SLEM.out"              >> ${target_dir}/SLEM
                 echo "#SBATCH --error=${target_dir}/SLEM.err"               >> ${target_dir}/SLEM
                 echo "#SBATCH --exclude=${excluded_nodes}"                  >> ${target_dir}/SLEM 
                 echo "source $vini_dir/globals"                             >> ${target_dir}/SLEM
                 echo "module purge"                                         >> ${target_dir}/SLEM
                 echo "target_dir=$target_dir"                               >> ${target_dir}/SLEM
                 echo "WORKDIR=${WORKDIR}"                                   >> ${target_dir}/SLEM
                 echo "source $INSTALL/miniconda3/bin/activate"              >> ${target_dir}/SLEM
                 echo "conda activate env310"                                >> ${target_dir}/SLEM

                 echo "ls ${target_dir}/log* > tmp"                          >> ${target_dir}/SLEM #create vector
                 echo "logs=\`wc -l < tmp\`"                                 >> ${target_dir}/SLEM
                 echo "> ${target_dir}/vec"                                  >> ${target_dir}/SLEM
                 echo "for (( N=1; N<\$((logs+1)); N++ ))"                   >> ${target_dir}/SLEM
                 echo "do"                                                   >> ${target_dir}/SLEM
                 echo "    printf -v comp_index "%03d" \$N"                  >> ${target_dir}/SLEM
                 echo "    affinity_value=\$(cat \${target_dir}/log_\${comp_index})" >> ${target_dir}/SLEM
                 echo "    echo \$affinity_value >> \${target_dir}/vec"      >> ${target_dir}/SLEM
                 echo "done"                                                 >> ${target_dir}/SLEM
                 echo "grep ERROR ${target_dir}/vec > tmp"                   >> ${target_dir}/SLEM
                 echo "if  [ -s tmp ]"                                       >> ${target_dir}/SLEM
                 echo "then"                                                 >> ${target_dir}/SLEM
                 echo "    python3 $vini_dir/get_random_value.py ${target_dir}/vec" >> ${target_dir}/SLEM
                 echo "fi"                                                   >> ${target_dir}/SLEM

                 echo "ls ${target_dir}/log* > tmp"                          >> ${target_dir}/SLEM #create matrix & eigenvalues
                 echo "complexes=\`wc -l < tmp\`"                            >> ${target_dir}/SLEM
                 echo "echo \$complexes > complexes"                         >> ${target_dir}/SLEM
                 echo "python3 $vini_dir/create_energy_binding_matrix.py $target_dir/target_dir" >> ${target_dir}/SLEM
                 echo "python3 $vini_dir/compute_eigenvalues.py -s $target_dir/EB_matrix -t $target_dir/eigenvalues" >> ${target_dir}/SLEM
                 echo "conda deactivate"                                     >> ${target_dir}/SLEM
                 cat $vini_dir/compute_SLEM                                  >> ${target_dir}/SLEM #compute SLEM
                 chmod u+x                                                      ${target_dir}/SLEM
                 input_list=$WORKDIR/dockidlist_${I}_${J}_${L}_${M}           #generate sbatch command and submit job
                 out_list=$WORKDIR/slemidlist
                 slurm_script=${target_dir}/SLEM
                 output_command_file=$WORKDIR/SLEM_${I}_${J}_${L}_${M}
                 sh $vini_dir/generate_sbatch_command.sh ${input_list} ${out_list} ${slurm_script} ${output_command_file} $I $J $L $M
                 chmod u+x $WORKDIR/SLEM_${I}_${J}_${L}_${M}
                 sh $WORKDIR/SLEM_${I}_${J}_${L}_${M}                                   
                 let ligand_number++
             done   #end of 4thloop
         done       #end of 3rd loop
    done            #end of 2nd loop
done                #end of 1st loop

echo "#!/bin/bash"                                    > $WORKDIR/postproc
echo "#SBATCH --time="$walltime                      >> $WORKDIR/postproc
echo "#SBATCH --account=$SLURMACCT"                  >> $WORKDIR/postproc
echo "#SBATCH --partition="$partition                >> $WORKDIR/postproc
echo "#SBATCH --ntasks=1"                            >> $WORKDIR/postproc
echo "#SBATCH --cpus-per-task=1"                     >> $WORKDIR/postproc
echo "#SBATCH --job-name=postproc"                   >> $WORKDIR/postproc
echo "#SBATCH --output=$WORKDIR/postproc.out"        >> $WORKDIR/postproc
echo "#SBATCH --error=$WORKDIR/postproc.err"         >> $WORKDIR/postproc
echo "#SBATCH --exclude=${excluded_nodes}"           >> $WORKDIR/postproc
echo "WORKDIR=${WORKDIR}"                            >> $WORKDIR/postproc
echo "if  [ $cosmic == y ]"                          >> $WORKDIR/postproc
echo "then"                                          >> $WORKDIR/postproc
echo "    exp=exp"                                   >> $WORKDIR/postproc
echo "else"                                          >> $WORKDIR/postproc
echo "    exp=noexp"                                 >> $WORKDIR/postproc
echo "fi"                                            >> $WORKDIR/postproc
echo "cp $WORKDIR/SLEM_values $WORKDIR/${CANCER_PATHWAY}_results/SLEM_values_${cell_line}_thl${therapy_level}_${exp}" >> $WORKDIR/postproc
cat $vini_dir/delete_SLEM_entries_with_equal_indices >> $WORKDIR/postproc  
cat $vini_dir/create_SLEM_named_list                 >> $WORKDIR/postproc
echo "if  [ $therapy_level -ne $ONES ]"              >> $WORKDIR/postproc
echo "then"                                          >> $WORKDIR/postproc
echo "    sh $vini_dir/create_SLEM_wings_list"       >> $WORKDIR/postproc
echo "    sh $vini_dir/create_SLEM_wings_named_list" >> $WORKDIR/postproc
echo "fi"                                            >> $WORKDIR/postproc
echo "cp $vini_dir/ligands/ligands_list.orig $vini_dir/ligands/ligands_list" >> $WORKDIR/postproc
echo "if  [[ ${compute_cell_line} -eq $TRUE ]] && [[ ${max_therapy_level} -eq $ONES ]]" >> $WORKDIR/postproc
echo "then"                                          >> $WORKDIR/postproc
echo "    if  [ $NCI60 == yes ]"                     >> $WORKDIR/postproc
echo "    then"                                      >> $WORKDIR/postproc
echo "        sh $vini_dir/validate_cell_line"       >> $WORKDIR/postproc
echo "    fi"                                        >> $WORKDIR/postproc
echo "fi"                                            >> $WORKDIR/postproc
input_list=$WORKDIR/slemidlist                   #generate sbatch command and submit job
out_list=$WORKDIR/postprocidlist
slurm_script=$WORKDIR/postproc
output_command_file=$WORKDIR/POSTPROC
sh $vini_dir/generate_sbatch_command.sh ${input_list} ${out_list} ${slurm_script} ${output_command_file} $I $J $L $M
chmod u+x $WORKDIR/POSTPROC
sh $WORKDIR/POSTPROC                                   
