source $vini_dir/globals



job_status=`cat job_status`       
job_submit=`cat job_submit`
partition=`cat cpu_partition`
walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'` #By default we are running Vini jobs on cpu nodes
excluded_nodes=`cat excluded_${partition}_nodes`
receptors=`wc -l < $WORKDIR/receptors_contracted`
ligands=`wc -l < $vini_dir/ligands/ligands_list`


mkdir -p $WORKDIR/${CANCER_PATHWAY}_results #Create directory for results
cd $WORKDIR

L1=1; L2=1; L3=1; L4=1;                 #Initializing main loops
case $therapy_level in                  
     1) L4=$ligands ;;
     2) L3=$ligands; L4=$ligands ;;
     3) L2=$ligands; L3=$ligands; L4=$ligands ;;
     4) L1=$ligands; L2=$ligands; L3=$ligands; L4=$ligands ;;
esac

dir=$WORKDIR/${cancer_type}_data         #setting loop control parameters
if  [ $state == crash ]
then
    ligand_number=`grep ligand_number $WORKDIR/restartfile | awk '{print $2}'`
    Kappa=`grep          I         $WORKDIR/restartfile | awk '{print $2}'`
    Lambda=`grep         J         $WORKDIR/restartfile | awk '{print $2}'`
    Mu=`grep             L         $WORKDIR/restartfile | awk '{print $2}'`
    Nu=`grep             M         $WORKDIR/restartfile | awk '{print $2}'`
    Xi=$ONES
    echo "deleting SLEM values after the last checkpoint"
    MaxSLEMvalues=`echo ${Kappa} ${Lambda} ${Mu} ${Nu} ${Xi} ${ligands} | awk '{print $1 * $2 * $3 * $4 * $5 * $6 }'`
    NoSLEMvalues=`echo ${Kappa} ${Lambda} ${Mu} ${Nu} ${Xi} ${ligand_number} | awk '{print $1 * $2 * $3 * $4 * $5 * $6 }'`
    Delete=`echo $MaxSLEMvalues $NoSLEMvalues $ONES | awk '{print $1 - $2 - $3}'`
    head -$Delete $vini_dir/ligands/ligands_list > $WORKDIR/tmp
    mv $WORKDIR/tmp $WORKDIR/SLEM_values
else
    ligand_number=1                #initializing ligand index
    Kappa=$ONES
    Lambda=$ONES
    Mu=$ONES
    Nu=$ONES
    Xi=$ONES
fi
 
SECONDS=$NULL

rm -f $WORKDIR/dock_id_list

echo "Calculating free binding energies for therapy level ${therapy_level}. This may take a while, please be patient."

for (( I=$((Kappa)); I<$((L1+1)); I++ )) #1st loop - 4th therapy level
do
    for (( J=$((Lambda)); J<$((L2+1)); J++ )) #2nd loop -3rd therapy level
    do
         for (( L=$((Mu)); L<$((L3+1)); L++ )) #3rd loop -2nd therapy level
         do
             for (( M=$((Nu)); M<$((L4+1)); M++ )) #4th loop - M = the number of ligands - 1st therapy level
             do
                 printf -v lig_index "%03d" $M  
                 case $therapy_level in
                     1) comp_source=$dir;          target_dir=$dir/$M ;;
                     2) comp_source=$dir/$M;       target_dir=$dir/$M/$L ;;
                     3) comp_source=$dir/$M/$L;    target_dir=$dir/$M/$L/$J ;;
                     4) comp_source=$dir/$M/$L/$J; target_dir=$dir/$M/$L/$J/$I ;;
                 esac
                 mkdir -p $comp_source $target_dir # nr. of target dirs equals nr. of ligands
                 for (( N=$((Xi)); N<$((receptors+1)); N++ )) #5th loop - N is the number of KEGG receptors
       	         do
                     printf -v n "%03d" $N
                     comp_index=$n
                     conf_index=$comp_index
                     log_index=$comp_index
                     line=`head -"$ligand_number" $vini_dir/ligands/ligands_list | tail -1`
                     drug=`echo $line | awk -F',' '{print $1}'`
                     drugtype=`echo $line | awk -F','  '{print $2}'`
                     mkdir -p $WORKDIR/$comp_index
                     cd $WORKDIR/$comp_index   #move to the working area
                     rm -rf *

                     echo "#!/bin/bash"                                                            > dock  
                     echo "#SBATCH --time="$walltime                                              >> dock
                     echo "#SBATCH --account=$SLURMACCT"                                          >> dock
                     echo "#SBATCH --partition="$partition                                        >> dock
                     echo "#SBATCH --exclude=${excluded_nodes}"                                   >> dock
                     echo "#SBATCH --job-name=D${M}.${N}"                                         >> dock
                     echo "#SBATCH --output=D${M}.${N}.out"                                       >> dock
                     echo "#SBATCH --error=D${M}.${N}.err"                                        >> dock
                     echo "#SBATCH --nodes=1"                                                     >> dock

                     if [ $drugtype == P ] #get ligand
                     then
                         cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdb ./
                     else
                         cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdbqt ./
                     fi

                     if  [ ! -e $comp_source/complex_${comp_index}.pdb ]
                     then
                         echo "ERROR" > $target_dir/log_${comp_index}
                     else
                         cp $comp_source/complex_${comp_index}.pdb ./     #prepare receptor
                         cp $vini_dir/modify_chain_id.py $vini_dir/update_pdb.py ./
                         if  [ $drugtype == S ]
                         then                                               #drug is a small molecule - using Vina or ADT
                             echo "#SBATCH --ntasks=1"                                                   >> dock
                             echo "#SBATCH --cpus-per-task="$threads                                     >> dock
                             echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt" >> dock
			     
                             UNKN1=`grep -w PT ligand_${lig_index}.pdbqt | awk '{print $3}'`
                             UNKN2=`grep -w B ligand_${lig_index}.pdbqt | awk '{print $3}'`
                             if  [[ -z $UNKN1 ]] && [[ -z $UNKN2 ]] #No metal ions, using Autodock Vina
                             then
                                 echo "cp $MGLTOOLS/AD4_parameters.dat ./"                                    >> dock
                                 echo "cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdbqt ./"                >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt" >> dock
                                 echo "sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index}" >> dock
                                 echo "vina --cpu $threads --size_x 40 --size_y 40 --size_z 40 --config conf_$conf_index.txt --exhaustiveness ${exhaustiveness} --receptor complex_${comp_index}.pdbqt --ligand ligand_${lig_index}.pdbqt --out ligand.pdbqt > log" >> dock
                                 echo "if  [ -e ligand.pdbqt ]"                                                 >> dock
                                 echo "then"                                                                    >> dock
                                 echo "    obabel -ipdbqt complex_${comp_index}.pdbqt -O complex_${comp_index}.pdb" >> dock
                                 echo "    infile=complex_${comp_index}.pdb"                                    >> dock #get last ATOM/HETATM number from receptor
                                 echo "    last_order_number=\$(awk '/^(ATOM|HETATM)/{order=\$2} END{print order}' "\${infile}")" >> dock
                                 echo "    obabel -ipdbqt ligand.pdbqt -O tmp.pdb"                              >> dock
                                 echo "    grep -we HETATM -we END tmp.pdb > ligand.pdb"                        >> dock
                                 echo "    chain_id=\`grep -m 1 "ATOM" complex_${comp_index}.pdb | awk '{print \$5}'\`" >> dock
                                 echo "    python3 modify_chain_id.py ligand.pdb tmp \$chain_id"                >> dock
                                 echo "    python3 update_pdb.py \$last_order_number tmp ligand.pdb"            >> dock  #modify ATOM numbers
                                 echo "    sed -i -e "s/UNL/$ligand/" ligand.pdb"                               >> dock
                                 echo "    cat complex_${comp_index}.pdb > tmp"                                 >> dock
                                 echo "    cat ligand.pdb >> tmp"                                               >> dock
                                 echo "    grep -we ATOM -we HETATM tmp > $target_dir/complex_${comp_index}.pdb" >> dock
                                 echo "    line=\$((39 + num_modes))"                                           >> dock
                                 echo "    head -\${line} log | tail -1 | awk '{print \$2}' > $target_dir/log_${comp_index}" >> dock
                                 echo "else"                                                                    >> dock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                          >> dock
                                 echo "fi"                                                                      >> dock
                             else        #Using Autodock 4
                                 if  [ ! -z $UNKN1 ]
                                 then
                                     grep -w Pt $vini_dir/AD4_parameters_for_metal_ions > param_file
                                 else  
                                     grep -w B $vini_dir/AD4_parameters_for_metal_ions > param_file
                                 fi

                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf4.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt -o complex_${comp_index}.gpf" >> dock
                                 echo "echo "parameter_file param_file" > tmp"                                      >> dock
                                 echo "cat complex_${comp_index}.gpf >> tmp"                                        >> dock
                                 echo "mv tmp complex_${comp_index}.gpf"                                            >> dock
                                 echo "autogrid4 -p complex_${comp_index}.gpf -l complex_${comp_index}.glg"         >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_dpf42.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt -o complex_${comp_index}.dpf" >> dock
                                 echo "echo "parameter_file param_file" > tmp"                                      >> dock
                                 echo "cat complex_${comp_index}.dpf >> tmp"                                        >> dock
                                 echo "mv tmp complex_${comp_index}.dpf"                                            >> dock
                                 echo "autodock4 -p complex_${comp_index}.dpf -l complex_${comp_index}.log"         >> dock
                                 echo "python3 $vini_dir/extract_docked_ligand_coordinates.py complex_${comp_index}.log ligand_${lig_index}.pdbqt"   >> adock
                                 echo "cat complex_${comp_index}.pdbqt > COMPLEX.pdbqt"                             >> dock
                                 echo "cat ligand_${lig_index}.pdbqt  >> COMPLEX.pdbqt"                             >> dock
                                 echo "if  [ -e COMPLEX.pdbqt ]"                                                    >> dock
                                 echo "then"                                                                        >> dock
                                 echo "    obabel -ipdbqt COMPLEX.pdbqt -O $target_dir/complex_${comp_index}.pdb"   >> dock
                                 echo "    grep  \"DOCKED: USER \" complex_${comp_index}.log | grep  \"Estimated Free Energy of Binding \" | sort -k2 -n > tmp" >> dock
                                 echo "    a=\`head -1 tmp | awk '{print \$9}'\`"                                   >> dock
                                 echo "    if  awk \"BEGIN {exit !(\$a > 0)}\""                                     >> dock
                                 echo "    then"                                                                    >> dock
                                 echo "        echo ERROR > $target_dir/log_${comp_index}"                          >> dock
                                 echo "    else"                                                                    >> dock
                                 echo "        echo \$a > $target_dir/log_${comp_index}"                            >> dock
                                 echo "    fi"                                                                      >> dock
                                 echo "else"                                                                        >> dock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                              >> dock
                                 echo "fi"                                                                          >> dock
                             fi
                         else                             #drug is a mAb - checking if complex is compound     
                             grep HETATM complex_${comp_index}.pdb > tmp
                             if  [ -s tmp ]             #if complex is a compound swap ligand_receptor and run Vina
                             then                                         
                                 echo "#SBATCH --ntasks=1"                                                    >> dock
                                 echo "#SBATCH --cpus-per-task="$threads                                      >> dock

                                 mv complex_${comp_index}.pdb tmp    
                                 mv ligand_${lig_index}.pdb complex_${comp_index}.pdb
                                 mv tmp ligand_${lig_index}.pdb
                                 echo "touch ${target_dir}/Vina"                                              >> dock
                                 echo "cp $MGLTOOLS/AD4_parameters.dat ./"                                    >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt" >> dock
                                 echo "$MGLBIN/pythonsh $MGLTOOLS/Utilities24/prepare_ligand4.py -l ligand_${lig_index}.pdb -o ligand_${lig_index}.pdbqt" >> dock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt" >> dock
                                 echo "sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index}" >> dock
                                 echo "vina --cpu $threads --size_x 40 --size_y 40 --size_z 40 --config conf_$conf_index.txt --exhaustiveness ${exhaustiveness} --receptor complex_${comp_index}.pdbqt --ligand ligand_${lig_index}.pdbqt --out ligand.pdbqt > log" >> dock
                                 echo "if  [ -e ligand.pdbqt ]"                                               >> dock
                                 echo "then"                                                                  >> dock
                                 echo "    obabel -ipdbqt complex_${comp_index}.pdbqt -O complex_${comp_index}.pdb" >> dock
                                 echo "    infile=complex_${comp_index}.pdb"                                  >> dock #get last ATOM/HETATM number from receptor
                                 echo "    last_order_number=\$(awk '/^(ATOM|HETATM)/{order=\$2} END{print order}' "\${infile}")" >> vdock
                                 echo "    obabel -ipdbqt ligand.pdbqt -O tmp.pdb"                            >> dock
                                 echo "    grep -we HETATM -we END tmp.pdb > ligand.pdb"                      >> dock
                                 echo "    chain_id=\`grep -m 1 "ATOM" complex_${comp_index}.pdb | awk '{print \$5}'\`" >> dock
                                 echo "    python3 modify_chain_id.py ligand.pdb tmp \$chain_id"              >> dock
                                 echo "    python3 update_pdb.py \$last_order_number tmp ligand.pdb"          >> dock  #modify ATOM numbers
                                 echo "    sed -i -e "s/UNL/$ligand/" ligand.pdb"                             >> dock
                                 echo "    cat complex_${comp_index}.pdb > tmp"                               >> dock
                                 echo "    cat ligand.pdb >> tmp"                                             >> dock
                                 echo "    grep -we ATOM -we HETATM tmp > $target_dir/complex_${comp_index}.pdb" >> dock
                                 echo "    line=\$((39 + num_modes))"                                         >> dock
                                 echo "    head -\${line} log | tail -1 | awk '{print \$2}' > $target_dir/log_${comp_index}" >> dock
                                 echo "else"                                                                  >> dock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                        >> dock
                                 echo "fi"                                                                    >> dock
                             else                                             #using Rosetta
                                 cp $vini_dir/flag_input_relax $vini_dir/docking.mac ./
                                 cp $vini_dir/analyze_chains.py ./
                                 cp $ROSETTA_TOOLS/amino_acids.py ./
                                 cp $ROSETTA_PUB/clean_pdb_keep_ligand.py ./
                                 source $INSTALL/miniconda2/bin/activate
                                 python clean_pdb_keep_ligand.py complex_${comp_index}.pdb -ignorechain
                                 mv complex_${comp_index}.pdb_00.pdb complex_${comp_index}.pdb
                                 conda deactivate
                                 python3 analyze_chains.py ${comp_index} ${lig_index}

                                 echo "#SBATCH --ntasks-per-node="$threads                                     >> dock
                                 echo "#SBATCH --cpus-per-task=1"                                              >> dock
                                 echo "module purge"                                                           >> dock
                                 echo "module load libGLU/9.0.2-GCCcore-11.3.0"                                >> dock
                                 echo "module load OpenMPI/4.1.1-GCC-11.2.0"                                   >> dock
                                 echo "cp complex_${comp_index}.pdb receptor.pdb"                              >> dock
                                 echo "cp ligand_${lig_index}.pdb ligand.pdb"                                  >> dock
                                 echo "cp $vini_dir/docking.mac ./"                                            >> dock
                                 echo "hex -batch receptor.pdb ligand.pdb < docking.mac > docking.log"         >> dock
                                 echo "cp complex.pdb complex_${comp_index}.pdb"                               >> dock
                                 echo "mpirun -np $threads $ROSETTA/source/bin/relax.mpi.linuxgccrelease -in:file:s complex_${comp_index}.pdb @flag_input_relax -overwrite" >> dock
                                 echo "mpirun -np $threads $ROSETTA/source/bin/docking_protocol.mpi.linuxgccrelease -in:file:s complex_${comp_index}_0002.pdb @flag_global_docking" >> dock
                                 echo "if [ -e ROSETTA_CRASH.log ]"                                            >> dock
                                 echo "then"                                                                   >> dock
                                 echo "    echo "ERROR" > $target_dir/log_${comp_index}"                       >> dock
                                 echo "else"                                                                   >> dock
                                 echo "    cp complex_${comp_index}_0002_0001.pdb $target_dir/complex_${comp_index}.pdb" >> dock
                                 echo "    string=\`grep partners flag_global_docking\`"                       >> dock
                                 echo "    read -r p1 p2 <<< \$(echo "\$string" | awk '{split(\$2, arr, \"_\"); print arr[1], arr[2]}')" >> dock
                                 echo "    mpirun -np $threads $ROSETTA/source/bin/InterfaceAnalyzer.mpi.linuxgccrelease -s complex_${comp_index}_0002_0001.pdb -interface \${p1}_\${p2} -out:file:score_only interface.sc -compute_packstat  -packstat::oversample 100 -overwrite" >> dock
                                 echo "    score=\`tail -1 interface.sc | awk '{print \$6}'\`"                 >> dock
                                 echo "    if  [ -z \${score} ] ; then"                                        >> dock
                                 echo "        echo ERROR > $target_dir/log_${comp_index}"                     >> dock
                                 echo "    else"                                                               >> dock
                                 echo "        echo \${score} > $target_dir/log_${comp_index}"                 >> dock
                                 echo "    fi"                                                                 >> dock
                                 echo "fi"                                                                     >> dock
                             fi
                         fi
                     fi
                 sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                 chmod u+x dock
                 #${job_submit} dock
                 dock_id=$(sbatch dock)
                 dock_id=`echo ${dock_id} | awk '{print $4}'`
                 echo "$M $L $J $I ${dock_id}" >> $WORKDIR/dock_id_list

                 echo "ligand: ${ligand_number}     I: $I     J: $J     L: $L     M: $M" >> $WORKDIR/restartfile
    	         done # end of 5th loop

                 #sh $vini_dir/wait_until_jobs_finish

                 
                 cd $WORKDIR
                 echo ${target_dir} > target_dir
                 echo ${WORKDIR} > working_dir
                 echo $M > M; echo $L > L; echo $J > J; echo $I > I

                 echo "Computing SLEM..."
                 echo ${therapy_level} > $WORKDIR/therapy_level    #input for the create_energy_binding_matrix.py script 
                 rm -f ${target_dir}/vec*
                 echo "#!/bin/bash"                                           > ${target_dir}/compute_SLEM
                 echo "#SBATCH --time="$walltime                             >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --account=$SLURMACCT"                         >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --partition="$partition                       >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --ntasks=1"                                   >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --cpus-per-task=1"                            >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --job-name=SLEM"                              >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --output=${target_dir}/compute_SLEM.out"      >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --output=${target_dir}/compute_SLEM.err"      >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --exclude=${excluded_nodes}"                  >> ${target_dir}/compute_SLEM 
                 echo "module purge"                                         >> ${target_dir}/compute_SLEM
                 echo "WORKDIR=${WORKDIR}"                                   >> ${target_dir}/compute_SLEM
                 echo "INSTALL=${INSTALL}"                                   >> ${target_dir}/compute_SLEM
                 echo "source $INSTALL/miniconda3/bin/activate"              >> ${target_dir}/compute_SLEM
                 echo "conda activate env310"                                >> ${target_dir}/compute_SLEM
                 cat $vini_dir/create_vector                                 >> ${target_dir}/compute_SLEM
                 echo "ls ${target_dir}/log* > tmp"                          >> ${target_dir}/compute_SLEM
                 echo "complexes=\`wc -l < tmp\`"                            >> ${target_dir}/compute_SLEM
                 echo "echo \$complexes > complexes"                         >> ${target_dir}/compute_SLEM
                 echo "python3 $vini_dir/create_energy_binding_matrix.py"    >> ${target_dir}/compute_SLEM
                 echo "python3 $vini_dir/compute_eigenvalues.py -s $target_dir/EB_matrix -t $target_dir/eigenvalues" >> ${target_dir}/compute_SLEM
                 echo "conda deactivate"                                     >> ${target_dir}/compute_SLEM
                 cat $vini_dir/compute_SLEM                                  >> ${target_dir}/compute_SLEM
                 chmod u+x                                                      ${target_dir}/compute_SLEM

                 #${job_submit}                                                 ${target_dir}/compute_SLEM ${target_dir} ${WORKDIR} $M $L $J $I

                 input_file="$WORKDIR/dock_id_list" #generate sbatch command from $WORKDIR/dock_id_list
                 sh $vini_dir/generate_sbatch_command.sh "$input_file" "$target_dir" > SLEM
                 chmod u+x SLEM
                 sh $vini_dir/wait_until_jobs_finish
                 ./SLEM
                 let ligand_number++
             done   #end of 4thloop
         done       #end of 3rd loop
    done            #end of 2nd loop
done                #end of 1st loop

sleep 4
sh $vini_dir/wait_until_jobs_finish

if  [ $cosmic == y ] ; then
    exp=exp
else
    exp=noexp
fi

cp $WORKDIR/SLEM_values $WORKDIR/${CANCER_PATHWAY}_results/SLEM_values_${cell_line}_thl${therapy_level}_${exp}

echo "Finalizing SLEM lists."
echo "#!/bin/bash"                                    > $WORKDIR/postproc
echo "#SBATCH --time="$walltime                      >> $WORKDIR/postproc
echo "#SBATCH --account=$SLURMACCT"                  >> $WORKDIR/postproc
echo "#SBATCH --partition="$partition                >> $WORKDIR/postproc
echo "#SBATCH --ntasks=1"                            >> $WORKDIR/postproc
echo "#SBATCH --cpus-per-task=1"                     >> $WORKDIR/postproc
echo "#SBATCH --job-name=postproc"                   >> $WORKDIR/postproc
echo "#SBATCH --output=$WORKDIR/postproc.out"        >> $WORKDIR/postproc
echo "#SBATCH --error=$WORKDIR/postproc.err"         >> $WORKDIR/postproc
echo "#SBATCH --exclude=${excluded_nodes}"           >> $WORKDIR/postproc
echo "WORKDIR=${WORKDIR}"                            >> $WORKDIR/postproc
cat $vini_dir/delete_SLEM_entries_with_equal_indices >> $WORKDIR/postproc  
cat $vini_dir/create_SLEM_named_list                 >> $WORKDIR/postproc
echo "if  [ $therapy_level -ne $ONES ]"              >> $WORKDIR/postproc
echo "then"                                          >> $WORKDIR/postproc
echo "    sh $vini_dir/create_SLEM_wings_list"       >> $WORKDIR/postproc
echo "    sh $vini_dir/create_SLEM_wings_named_list" >> $WORKDIR/postproc
echo "fi"                                            >> $WORKDIR/postproc
chmod u+x                                               $WORKDIR/postproc
$job_submit -Q                                          $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish

echo "Done. The results are in $WORKDIR/${CANCER_PATHWAY}_results directory."
