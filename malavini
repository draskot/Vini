NULL=0
ONES=1
ORGANISM=`cat $WORKDIR/ORGANISM`                    #getting the organism type from the main script
cancer_type=`cat $WORKDIR/cancer_type`              #getting the cancer type from the main script
CANCER_PATHWAY=$ORGANISM$cancer_type                #setting the cancer pathway
therapy_level=`cat $WORKDIR/therapy_level`         #therapy level
compute_cell_line=`cat $WORKDIR/compute_cell_line`
cosmic=`cat $WORKDIR/cosmic`
cell_line=`cat $WORKDIR/cell_line`                  #getting the cell line name
job_status=`cat job_status`       
job_submit=`cat job_submit`
exhaustiveness=`cat $WORKDIR/exhaustiveness`
box_size=`cat $WORKDIR/box_size`
random_affinity=`cat $WORKDIR/random_affinity`
max_jobs=`cat $WORKDIR/max_jobs` #maximum number of Vina jobs
MAX_NODES=`cat $WORKDIR/nodes`       #maximum number of compute nodes Vini can use concurrently
partition=`cat $WORKDIR/cpu_partition`
walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'` #By default we are running Vini jobs on cpu nodes
excluded_nodes=`cat $WORKDIR/excluded_${partition}_nodes`
complexes=`wc -l < $WORKDIR/receptors_contracted`
ligands=`wc -l < $vini_dir/ligands/ligands_list`


lig_source=$WORKDIR/ligands


mkdir -p $WORKDIR/${CANCER_PATHWAY}_results #Create directory for results
cd $WORKDIR

case $therapy_level in                  #Initializing main loops
     1) L4=$ligands ;;
     2) L3=$ligands; L4=$ligands ;;
     3) L2=$ligands; L3=$ligands; L4=$ligands ;;
     4) L1=$ligands; L2=$ligands; L3=$ligands; L4=$ligands ;;
esac

state=`cat $WORKDIR/state`                 #setting loop control parameters
dir=$WORKDIR/${cancer_type}_data 
if  [ $state == crash ]
then
    ligand_number=`grep ligand_number $WORKDIR/restartfile | awk '{print $2}'`
    I=`grep         I         $WORKDIR/restartfile | awk '{print $2}'`
    J=`grep         J         $WORKDIR/restartfile | awk '{print $2}'`
    L=`grep         L         $WORKDIR/restartfile | awk '{print $2}'`
    M=`grep         M         $WORKDIR/restartfile | awk '{print $2}'`
    N=$ONES
    echo "deleting SLEM values after the last checkpoint"
    MaxSLEMvalues=`echo ${I} ${J} ${L} ${M} ${N} ${ligands} | awk '{print $1 * $2 * $3 * $4 * $5 * $6 }'`
    NoSLEMvalues=`echo ${I} ${J} ${L} ${M} ${N} ${ligand_number} | awk '{print $1 * $2 * $3 * $4 * $5 * $6 }'`
    Delete=`echo $MaxSLEMvalues $NoSLEMvalues $ONES | awk '{print $1 - $2 - $3}'`
    head -$Delete $vini_dir/ligands/ligands_list > $WORKDIR/tmp
    mv $WORKDIR/tmp $WORKDIR/SLEM_values
else
    ligand_number=1                #initializing ligand index
    I=$ONES
    J=$ONES
    L=$ONES
    M=$ONES
    N=$ONES
    > $WORKDIR/SLEM_values    #delete SLEM values from the previous run
fi
 
SECONDS=$NULL

echo "brakepoint!" state: $state ; sleep 1000

echo "Calculating free binding energies for therapy level ${therapy_level}. This may take a while, please be patient."

for (( I=$((I)); I<$((L1+1)); I++ )) #1st loop - 4th therapy level
do
    for (( J=$((J)); J<$((L2+1)); J++ )) #2nd loop -3rd therapy level
    do
         for (( L=$((L)); L<$((L3+1)); L++ )) #3rd loop -2nd thl
         do
             for (( M=$((M)); M<$((L4+1)); M++ )) #4th loop - 1st thl
             do
                 printf -v lig_index "%03d" $M  
                 case $therapy_level in
                     1) comp_source=$dir;          target_dir=$dir/$M ;;
                     2) comp_source=$dir/$M;       target_dir=$dir/$M/$L ;;
                     3) comp_source=$dir/$M/$L;    target_dir=$dir/$M/$L/$J ;;
                     4) comp_source=$dir/$M/$L/$J; target_dir=$dir/$M/$L/$J/$I ;;
                 esac
                 mkdir -p $comp_source $target_dir # nr. of target dirs equals nr. of ligands
                 for (( N=$((N)); N<$((complexes+1)); N++ )) #5th loop
       	         do
                     printf -v n "%03d" $N
                     comp_index=$n
                     conf_index=$comp_index
                     log_index=$comp_index
                     echo "target_dir: $target_dir comp_source: $comp_source comp_index: $comp_index lig_index: $lig_index conf_index: $conf_index log_index $log_index brakepoint!" ; sleep 1000
                     moltype=`head -"$ligand_number" $vini_dir/ligands/ligands_list | tail -1`
                     moltype=`echo $moltype | awk -F','  '{print $2}'`
                     mkdir -p $WORKDIR/$comp_index
                     cd $WORKDIR/$comp_index
                     rm -rf *
                     if [ $moltype == S ] #if a small molecule, we are running Vina, else Rosetta docking
                     then
                         line=`head -$N $WORKDIR/receptors_contracted | tail -1` #do not compute FBE if receptor is with F flag or pdbqt file was not created
                         flag1=`echo $line | awk '{print $4}'`
                         flag2=`echo $line | awk '{print $7}'`
                         if  [[ $flag1 == F ]] || [[ $flag2 == nopdbqt ]]
                         then
                             affinity=`cat $WORKDIR/random_affinity`
                             printf "%.2f\n" $affinity > $target_dir/log_$comp_index.txt
                         else
                             cp $MGLTOOLS/AD4_parameters.dat ./   #Vina section                   
                             sh $vini_dir/prepare_Vina_complex ${therapy_level} ${comp_source} ${comp_index}
                             prepare_receptor -r $comp_source/complex_${comp_index}.pdb -o $comp_source/complex_${comp_index}.pdbqt #prepare receptor pdbqt file
                             cp $WORKDIR/ligand_${lig_index}.pdbqt ./ #get ligand pdbqt file
                             cp $comp_source/complex_${comp_index}.pdbqt ./ #get receptor pdbqt file
                             $MGLBIN/pythonsh $MGLUTILS/prepare_gpf.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt #prepare gpf file for autogrid4

                             sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index} ${comp_source} #create Vina config file                                                    
                             echo "#!/bin/bash"                                        > Vina
                             echo "#SBATCH --time="$walltime                          >> Vina
                             echo "#SBATCH --account=$SLURMACCT"                      >> Vina
                             echo "#SBATCH --cpus-per-task=4"                         >> Vina
                             echo "#SBATCH --mem=8gb"                                 >> Vina
                             echo "#SBATCH --partition="$partition                    >> Vina
                             echo "#SBATCH --job-name=Vina_${M}_${N}"                 >> Vina
                             echo "#SBATCH --output=${target_dir}/Vina_${M}_${N}.out" >> Vina
                             echo "#SBATCH --exclude=${excluded_nodes}"               >> Vina 
                             echo "vina --cpu 4 --size_x 40 --size_y 40 --size_z 40 --config $comp_source/conf_$conf_index.txt --exhaustiveness ${exhaustiveness} --receptor $comp_source/complex_${comp_index}.pdbqt --ligand ligand_${lig_index}.pdbqt --out $target_dir/complex_${comp_index}.pdbqt > $target_dir/log_$log_index.txt" >> Vina
                             cat $vini_dir/log_Vina_IC_value                          >> Vina
                             chmod u+x Vina
                             sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                             ${job_submit} Vina
                         fi
                         cd $WORKDIR
                     else                                                                         #Rosetta docking
                         if [ -e $comp_source/complex_${comp_index}.pdbqt ]                       #convert pdbqt to pdb
                         then
                             obabel $comp_source/complex_${comp_index}.pdbqt -O $comp_source/complex_${comp_index}.pdb
                         fi
                         complex=$comp_source/complex_${comp_index}
                         cp ${complex}.pdb ./                                                     #get complex
                         drug=`head -"$ligand_number" $vini_dir/ligands/ligands_list | tail -1`   #get drug
                         drug=`echo $drug | awk -F',' '{print $1}'`
                         cp $vini_dir/ligands/pdb_files/${drug}.pdb ./
                         sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                         cp $vini_dir/flag_input_relax $vini_dir/flag_global_docking ./
                         sh $vini_dir/rosetta_protein_docking ${complex} ${drug} ${target_dir} ${comp_index} ${lig_index}
                     fi

                     #sh $vini_dir/write_checkpoint ${frequency} ${ligand_number} ${I} ${J} ${L} ${M}    #write restart point
                     sh $vini_dir/write_checkpoint ${ligand_number} ${I} ${J} ${L} ${M}    #write restart point
                     #let frequency++                         
    	         done # end of 5th loop

                 sh $vini_dir/wait_until_jobs_finish

                 #echo "Creating binding energy vector, please wait."
                 #rm -f ${target_dir}/vec*
                 #echo "#!/bin/bash"                                          > ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --time="$walltime                            >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --cpus-per-task=1"                           >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --mem=4gb"                                   >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --partition="$partition                      >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --job-name=vec_${lig_index}"                 >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --account=$SLURMACCT"                        >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --output=${target_dir}/vec_${lig_index}.out" >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --output=${target_dir}/vec_${lig_index}.err" >> ${target_dir}/vec_${lig_index}
                 #echo "#SBATCH --exclude=${excluded_nodes}"                 >> ${target_dir}/vec_${lig_index} 
                 #cat $vini_dir/create_vector                                >> ${target_dir}/vec_${lig_index}
                 #chmod u+x ${target_dir}/vec_${lig_index}
                 #${job_submit} ${target_dir}/vec_${lig_index} ${target_dir} ${WORKDIR}
                 #sh $vini_dir/wait_until_jobs_finish
                 

                 echo "Creating binding energy matrix, please wait."
                 echo ${target_dir} > target_dir
                 echo "#!/bin/bash"                                          > ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --time="$walltime                            >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --cpus-per-task=1"                           >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --mem=4gb"                                   >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --partition="$partition                      >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --job-name=mat_${lig_index}"                 >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --account=$SLURMACCT"                        >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --output=${target_dir}/mat_${lig_index}.out" >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --error=${target_dir}/mat_${lig_index}.err"  >> ${target_dir}/mat_${lig_index}
                 echo "#SBATCH --exclude=${excluded_nodes}"                 >> ${target_dir}/mat_${lig_index} 
                 echo "WORKDIR=${WORKDIR}"                                  >> ${target_dir}/mat_${lig_index}
                 echo "source $INSTALL/miniconda3/bin/activate"             >> ${target_dir}/mat_${lig_index}
                 echo "conda activate env310"                               >> ${target_dir}/mat_${lig_index}
                 echo "python3 $vini_dir/create_energy_binding_matrix.py"   >> ${target_dir}/mat_${lig_index}
                 echo "conda deactivate"                                    >> ${target_dir}/mat_${lig_index}
                 chmod u+x ${target_dir}/mat_${lig_index}
                 ${job_submit} ${target_dir}/mat_${lig_index}
                 sh $vini_dir/wait_until_jobs_finish

                 echo "Calculating eigenvalues, please wait."
                 echo ${target_dir} > target_dir
                 echo "#!/bin/bash"                                            > ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --time="$walltime                              >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --cpus-per-task=1"                             >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --mem=4gb"                                     >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --partition="$partition                        >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --job-name=eigen_${lig_index}"                 >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --account=$SLURMACCT"                          >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --output=${target_dir}/eigen_${lig_index}.out" >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --error=${target_dir}/eigen_${lig_index}.err"  >> ${target_dir}/eigen_${lig_index}
                 echo "#SBATCH --exclude=${excluded_nodes}"                   >> ${target_dir}/eigen_${lig_index} 
                 echo "WORKDIR=${WORKDIR}"                                    >> ${target_dir}/eigen_${lig_index}
                 echo "source $INSTALL/miniconda3/bin/activate"               >> ${target_dir}/eigen_${lig_index}
                 echo "conda activate env310"                                 >> ${target_dir}/eigen_${lig_index}
                 echo "python3 $vini_dir/compute_eigenvalues.py -s $target_dir/EB_matrix -t $target_dir/E_Vina" >> ${target_dir}/eigen_${lig_index}
                 echo "conda deactivate"                                      >> ${target_dir}/eigen_${lig_index}
                 chmod u+x ${target_dir}/eigen_${lig_index}
                 ${job_submit} ${target_dir}/eigen_${lig_index}
                 sh $vini_dir/wait_until_jobs_finish

                 echo "Calculating SLEM, please wait."
                 echo "#!/bin/bash"                                           > ${target_dir}/select_${lig_index}
                 echo "#SBATCH --time="$walltime                             >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --cpus-per-task=1"                            >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --mem=4gb"                                    >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --partition="$partition                       >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --job-name=SLEM_${lig_index}"                 >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --account=$SLURMACCT"                         >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --output=${target_dir}/SLEM_${lig_index}.out" >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --error=${target_dir}/SLEM_${lig_index}.err"  >> ${target_dir}/select_${lig_index}
                 echo "#SBATCH --exclude=${excluded_nodes}"                  >> ${target_dir}/select_${lig_index} 
                 echo "WORKDIR=${WORKDIR}"                                   >> ${target_dir}/select_${lig_index}
                 cat $vini_dir/select_SLEM_value                             >> ${target_dir}/select_${lig_index}
                 chmod u+x ${target_dir}/select_${lig_index}
                 ${job_submit} ${target_dir}/select_${lig_index} ${M} ${L} ${J} ${I} ${target_dir} 
                 sh $vini_dir/wait_until_jobs_finish

                 let ligand_number++
             done   #end of 4thloop
         done       #end of 3rd loop
    done            #end of 2nd loop
done                #end of 1st loop

sh $vini_dir/wait_until_jobs_finish

if  [ $cosmic == y ] ; then
    exp=exp
else
    exp=noexp
fi

cp $WORKDIR/SLEM_values $WORKDIR/${CANCER_PATHWAY}_results/SLEM_values_${cell_line}_thl${therapy_level}_${exp}

echo "Deleting equal SLEM entries with equal indices, please wait..."
echo "#!/bin/bash"                                    > $WORKDIR/postproc
echo "#SBATCH --time="$walltime                      >> $WORKDIR/postproc
echo "#SBATCH --cpus-per-task=1"                     >> $WORKDIR/postproc
echo "#SBATCH --mem=4gb"                             >> $WORKDIR/postproc
echo "#SBATCH --partition="$partition                >> $WORKDIR/postproc
echo "#SBATCH --job-name=SLEM_${lig_index}"          >> $WORKDIR/postproc
echo "#SBATCH --account=$SLURMACCT"                  >> $WORKDIR/postproc
echo "#SBATCH --output=$WORKDIR/postproc1.out"       >> $WORKDIR/postproc
echo "#SBATCH --error=$WORKDIR/postproc1.err"        >> $WORKDIR/postproc
echo "#SBATCH --exclude=${excluded_nodes}"           >> $WORKDIR/postproc
echo "WORKDIR=${WORKDIR}"                            >> $WORKDIR/postproc
cat $vini_dir/delete_SLEM_entries_with_equal_indices >> $WORKDIR/postproc  
chmod u+x $WORKDIR/postproc
$job_submit $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish

echo "Creating SLEM named lists, please wait."
echo "#!/bin/bash"                                    > $WORKDIR/postproc
echo "#SBATCH --time="$walltime                      >> $WORKDIR/postproc
echo "#SBATCH --cpus-per-task=1"                     >> $WORKDIR/postproc
echo "#SBATCH --mem=4gb"                             >> $WORKDIR/postproc
echo "#SBATCH --partition="$partition                >> $WORKDIR/postproc
echo "#SBATCH --job-name=SLEM_${lig_index}"          >> $WORKDIR/postproc
echo "#SBATCH --account=$SLURMACCT"                  >> $WORKDIR/postproc
echo "#SBATCH --output=$WORKDIR/postproc2.out"       >> $WORKDIR/postproc
echo "#SBATCH --error=$WORKDIR/postproc2.err"        >> $WORKDIR/postproc
echo "#SBATCH --exclude=${excluded_nodes}"           >> $WORKDIR/postproc 
echo "WORKDIR=${WORKDIR}"                            >> $WORKDIR/postproc
cat $vini_dir/create_SLEM_named_list                 >> $WORKDIR/postproc
chmod u+x $WORKDIR/postproc
$job_submit $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish

if [ $therapy_level -ne $ONES ] ; then  
   echo "Creating SLEM wings list, please wait."
   echo "#!/bin/bash"                                 > $WORKDIR/postproc
   echo "#SBATCH --time="$walltime                   >> $WORKDIR/postproc
   echo "#SBATCH --cpus-per-task=1"                  >> $WORKDIR/postproc
   echo "#SBATCH --mem=4gb"                          >> $WORKDIR/postproc
   echo "#SBATCH --partition="$partition             >> $WORKDIR/postproc
   echo "#SBATCH --job-name=SLEM_${lig_index}"       >> $WORKDIR/postproc
   echo "#SBATCH --account=$SLURMACCT"               >> $WORKDIR/postproc
   echo "#SBATCH --output=$WORKDIR/postproc3.out"    >> $WORKDIR/postproc
   echo "#SBATCH --error=$WORKDIR/postproc3.err"     >> $WORKDIR/postproc
   cat $vini_dir/create_SLEM_wings_list              >> $WORKDIR/postproc
   echo "#SBATCH --exclude=${excluded_nodes}"        >> $WORKDIR/postproc 
   echo "WORKDIR=${WORKDIR}"                         >> $WORKDIR/postproc
   chmod u+x postproc
   $job_submit $WORKDIR/postproc
   sh $vini_dir/wait_until_jobs_finish

   echo "Creating SLEM wings named list, please wait."
   echo "#!/bin/bash"                                 > $WORKDIR/postproc
   echo "#SBATCH --time="$walltime                   >> $WORKDIR/postproc
   echo "#SBATCH --cpus-per-task=1"                  >> $WORKDIR/postproc
   echo "#SBATCH --mem=4gb"                          >> $WORKDIR/postproc
   echo "#SBATCH --partition="$partition             >> $WORKDIR/postproc
   echo "#SBATCH --job-name=SLEM_${lig_index}"       >> $WORKDIR/postproc
   echo "#SBATCH --account=$SLURMACCT"               >> $WORKDIR/postproc
   echo "#SBATCH --output=$WORKDIR/postproc4.out"    >> $WORKDIR/postproc
   echo "#SBATCH --error=$WORKDIR/postproc4.err"     >> $WORKDIR/postproc
   cat $vini_dir/create_SLEM_wings_named_list        >> $WORKDIR/postproc
   echo "#SBATCH --exclude=${excluded_nodes}"        >> $WORKDIR/postproc 
   echo "WORKDIR=${WORKDIR}"                         >> $WORKDIR/postproc
   chmod u+x postproc
   $job_submit $WORKDIR/postproc
   sh $vini_dir/wait_until_jobs_finish
fi

echo "Done. The results are in $WORKDIR/${CANCER_PATHWAY}_results directory."
