source $vini_dir/globals

job_status=`cat job_status`       
job_submit=`cat job_submit`
partition=`cat cpu_partition`
walltime=`sinfo | grep $partition | head -1 | awk '{print $3}'` #By default we are running Vini jobs on cpu nodes
excluded_nodes=`cat excluded_${partition}_nodes`
receptors=`wc -l < $WORKDIR/receptors_contracted`
ligands=`wc -l < $vini_dir/ligands/ligands_list`


mkdir -p $WORKDIR/${CANCER_PATHWAY}_results #Create directory for results
cd $WORKDIR

L1=1; L2=1; L3=1; L4=1;                 #Initializing main loops
case $therapy_level in                  
     1) L4=$ligands ;;
     2) L3=$ligands; L4=$ligands ;;
     3) L2=$ligands; L3=$ligands; L4=$ligands ;;
     4) L1=$ligands; L2=$ligands; L3=$ligands; L4=$ligands ;;
esac

dir=$WORKDIR/${cancer_type}_data         #setting loop control parameters
if  [ $state == crash ]
then
    ligand_number=`grep ligand_number $WORKDIR/restartfile | awk '{print $2}'`
    Kappa=`grep          I         $WORKDIR/restartfile | awk '{print $2}'`
    Lambda=`grep         J         $WORKDIR/restartfile | awk '{print $2}'`
    Mu=`grep             L         $WORKDIR/restartfile | awk '{print $2}'`
    Nu=`grep             M         $WORKDIR/restartfile | awk '{print $2}'`
    Xi=$ONES
    echo "deleting SLEM values after the last checkpoint"
    MaxSLEMvalues=`echo ${Kappa} ${Lambda} ${Mu} ${Nu} ${Xi} ${ligands} | awk '{print $1 * $2 * $3 * $4 * $5 * $6 }'`
    NoSLEMvalues=`echo ${Kappa} ${Lambda} ${Mu} ${Nu} ${Xi} ${ligand_number} | awk '{print $1 * $2 * $3 * $4 * $5 * $6 }'`
    Delete=`echo $MaxSLEMvalues $NoSLEMvalues $ONES | awk '{print $1 - $2 - $3}'`
    head -$Delete $vini_dir/ligands/ligands_list > $WORKDIR/tmp
    mv $WORKDIR/tmp $WORKDIR/SLEM_values
else
    ligand_number=1                #initializing ligand index
    Kappa=$ONES
    Lambda=$ONES
    Mu=$ONES
    Nu=$ONES
    Xi=$ONES
fi
 
SECONDS=$NULL

echo "Calculating free binding energies for therapy level ${therapy_level}. This may take a while, please be patient."

for (( I=$((Kappa)); I<$((L1+1)); I++ )) #1st loop - 4th therapy level
do
    for (( J=$((Lambda)); J<$((L2+1)); J++ )) #2nd loop -3rd therapy level
    do
         for (( L=$((Mu)); L<$((L3+1)); L++ )) #3rd loop -2nd therapy level
         do
             for (( M=$((Nu)); M<$((L4+1)); M++ )) #4th loop - M = the number of ligands - 1st therapy level
             do
                 printf -v lig_index "%03d" $M  
                 case $therapy_level in
                     1) comp_source=$dir;          target_dir=$dir/$M ;;
                     2) comp_source=$dir/$M;       target_dir=$dir/$M/$L ;;
                     3) comp_source=$dir/$M/$L;    target_dir=$dir/$M/$L/$J ;;
                     4) comp_source=$dir/$M/$L/$J; target_dir=$dir/$M/$L/$J/$I ;;
                 esac
                 mkdir -p $comp_source $target_dir # nr. of target dirs equals nr. of ligands
                 for (( N=$((Xi)); N<$((receptors+1)); N++ )) #5th loop - N is the number of KEGG receptors
       	         do
                     printf -v n "%03d" $N
                     comp_index=$n
                     conf_index=$comp_index
                     log_index=$comp_index
                     line=`head -"$ligand_number" $vini_dir/ligands/ligands_list | tail -1`
                     drug=`echo $line | awk -F',' '{print $1}'`
                     drugtype=`echo $line | awk -F','  '{print $2}'`
                     mkdir -p $WORKDIR/$comp_index
                     cd $WORKDIR/$comp_index   #move to the working area
                     rm -rf *

                     cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdb ./
                     if  [ ! -e $comp_source/complex_${comp_index}.pdb ]
                     then
                         echo "ERROR" > $target_dir/log_${comp_index}
                     else
                         cp $comp_source/complex_${comp_index}.pdb ./     #prepare receptor
                         if  [ $drugtype == S ]
                         then                                               #drug is a small molecule - using Vina or ADT
                             cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdbqt ./
			     UNKN1=`grep -w PT ligand_${lig_index}.pdbqt | awk '{print $3}'`
                             if [ -z $UNKN1 ]
                             then
			         UNKN1=`grep -w Pt ligand_${lig_index}.pdbqt | awk '{print $3}'`
                             fi
                             UNKN2=`grep -w B ligand_${lig_index}.pdbqt | awk '{print $3}'`
                             if  [[ -z $UNKN1 ]] && [[ -z $UNKN2 ]]
                             then
                                 echo "#!/bin/bash"                                                            > vdock  
                                 echo "#SBATCH --time="$walltime                                              >> vdock
                                 echo "#SBATCH --account=$SLURMACCT"                                          >> vdock
                                 echo "#SBATCH --partition="$partition                                        >> vdock
                                 echo "#SBATCH --nodes=1"                                                     >> vdock
                                 echo "#SBATCH --ntasks=1"                                                    >> vdock
                                 echo "#SBATCH --cpus-per-task="$threads                                      >> vdock
                                 echo "#SBATCH --job-name=V${M}.${N}"                                         >> vdock
                                 echo "#SBATCH --output=V${M}.${N}.out"                                       >> vdock
                                 echo "#SBATCH --error=V${M}.${N}.err"                                        >> vdock
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                   >> vdock
                                 echo "cp $MGLTOOLS/AD4_parameters.dat ./"                                    >> vdock
                                 echo "cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdbqt ./"                >> vdock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt"                                                                                                    >> vdock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt"                                                                                                        >> vdock
                                 echo "sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index}" >> vdock
                                 echo "vina --cpu $threads --num_modes 10 --size_x 40 --size_y 40 --size_z 40 --config conf_$conf_index.txt --exhaustiveness ${exhaustiveness} --receptor complex_${comp_index}.pdbqt --ligand ligand_${lig_index}.pdbqt --out ligand.pdbqt > log_${comp_index}"                                                                                                           >> vdock
                                 echo "if  [ -e ligand.pdbqt ]"                                               >> vdock
                                 echo "then"                                                                  >> vdock                
                                 echo "    obabel -ipdbqt complex_${comp_index}.pdbqt -O complex_${comp_index}.pdb" >> vdock
                                 echo "    infile=complex_${comp_index}.pdb"        >> vdock #get last ATOM/HETATM number from receptor
                                 echo "    last_order_number=\$(awk '/^(ATOM|HETATM)/{order=\$2} END{print order}' "\${infile}")" >> vdock
                                 echo "    obabel -ipdbqt ligand.pdbqt -O tmp.pdb"                            >> vdock
                                 echo "    grep -we HETATM -we END tmp.pdb > ligand.pdb"                      >> vdock
                                 echo "    chain_id=\`grep -m 1 "ATOM" complex_${comp_index}.pdb | awk '{print \$5}'\`" >> vdock
                                 echo "    python3 modify_chain_id.py ligand.pdb tmp \$chain_id"              >> vdock
                                 echo "    python3 update_pdb.py \$last_order_number tmp ligand.pdb"          >> vdock  #modify ATOM numbers
                                 echo "    cat complex_${comp_index}.pdb > tmp"                               >> vdock
                                 echo "    cat ligand.pdb >> tmp"                                             >> vdock
                                 echo "    grep -we ATOM -we HETATM tmp > $target_dir/complex_${comp_index}.pdb" >> vdock
                                 echo "    line=\$((39 + num_modes))"                                         >> vdock
                                 echo "    head -\${line} log | tail -1 | awk '{print \$2}' > $target_dir/log_${comp_index}" >> vdock
                                 echo "else"                                                                  >> vdock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                        >> vdock
                                 echo "fi"                                                                    >> vdock
                                 chmod u+x                                                                       vdock
                                 sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                                 ${job_submit} -Q                                                                vdock
                                 sh $vini_dir/write_checkpoint ${ligand_number} ${I} ${J} ${L} ${M}    #write restart point
                             else
                                 if  [ ! -z $UNKN1 ]
                                 then
                                     grep -w Pt $vini_dir/AD4_parameters_for_metal_ions > param_file
                                 else  
                                     grep -w B $vini_dir/AD4_parameters_for_metal_ions > param_file
                                 fi
                                 echo "#!/bin/bash"                                                                  > adock
                                 echo "#SBATCH --time="$walltime                                                    >> adock
                                 echo "#SBATCH --account=$SLURMACCT"                                                >> adock
                                 echo "#SBATCH --partition="$partition                                              >> adock
                                 echo "#SBATCH --nodes=1"                                                           >> adock
                                 echo "#SBATCH --ntasks=1"                                                          >> adock
                                 echo "#SBATCH --cpus-per-task="$threads                                            >> adock
                                 echo "#SBATCH --job-name=A${M}.${N}"                                               >> adock
                                 echo "#SBATCH --output=A${M}.${N}.out"                                             >> adock
                                 echo "#SBATCH --error=A${M}.${N}.err"                                              >> adock
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                         >> adock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt" >> adock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf4.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt -o complex_${comp_index}.gpf" >> adock
                                 echo "echo "parameter_file param_file" > tmp"                                      >> adock
                                 echo "cat complex_${comp_index}.gpf >> tmp"                                        >> adock
                                 echo "mv tmp complex_${comp_index}.gpf"                                            >> adock
                                 echo "autogrid4 -p complex_${comp_index}.gpf -l complex_${comp_index}.glg"         >> adock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_dpf42.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt -o complex_${comp_index}.dpf" >> adock
                                 echo "echo "parameter_file param_file" > tmp"                                      >> adock
                                 echo "cat complex_${comp_index}.dpf >> tmp"                                        >> adock
                                 echo "mv tmp complex_${comp_index}.dpf"                                            >> adock
                                 echo "autodock4 -p complex_${comp_index}.dpf -l complex_${comp_index}.log"         >> adock
                                 echo "python3 $vini_dir/extract_docked_ligand_coordinates.py complex_${comp_index}.log ligand_${lig_index}.pdbqt"   >> adock
                                 echo "cat complex_${comp_index}.pdbqt > COMPLEX.pdbqt"                             >> adock
                                 echo "cat ligand_${lig_index}.pdbqt  >> COMPLEX.pdbqt"                             >> adock
                                 echo "if  [ -e COMPLEX.pdbqt ]"                                                    >> adock
                                 echo "then"                                                                        >> adock
                                 echo "    obabel -ipdbqt COMPLEX.pdbqt -O $target_dir/complex_${comp_index}.pdb"   >> adock
                                 echo "    grep  \"DOCKED: USER \" complex_${comp_index}.log | grep  \"Estimated Free Energy of Binding \" | sort -k2 -n > tmp" >> adock
                                 echo "    a=\`head -1 tmp | awk '{print \$9}'\`"                                   >> adock
                                 echo "    if  awk \"BEGIN {exit !(\$a > 0)}\""                                     >> adock
                                 echo "    then"                                                                    >> adock
                                 echo "        echo ERROR > $target_dir/log_${comp_index}"                          >> adock
                                 echo "    else"                                                                    >> adock
                                 echo "        echo \$a > $target_dir/log_${comp_index}"                            >> adock
                                 echo "    fi"                                                                      >> adock
                                 echo "else"                                                                        >> adock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                              >> adock
                                 echo "fi"                                                                          >> adock
                                 chmod u+x                                                                             adock
                                 sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                                 ${job_submit} -Q                                                                      adock
                                 sh $vini_dir/write_checkpoint ${ligand_number} ${I} ${J} ${L} ${M}    #write restart point
                             fi
                         else                             #drug is a mAb - checking if complex is compound     
                             grep ATOM complex_${comp_index}.pdb > tmp
                             if  [ ! -s tmp ]                  #if complex is a compound run Vina
                             then                              #swap receptor-ligand          
                                 mv complex_${comp_index}.pdb tmp    
                                 mv ligand_${lig_index}.pdb complex_${comp_index}.pdb
                                 mv tmp ligand_${lig_index}.pdb
                                 echo "#!/bin/bash"                                                            > vdock
                                 echo "#SBATCH --time="$walltime                                              >> vdock
                                 echo "#SBATCH --account=$SLURMACCT"                                          >> vdock
                                 echo "#SBATCH --partition="$partition                                        >> vdock
                                 echo "#SBATCH --nodes=1"                                                     >> vdock
                                 echo "#SBATCH --ntasks=1"                                                    >> vdock
                                 echo "#SBATCH --cpus-per-task="$threads                                      >> vdock
                                 echo "#SBATCH --job-name=V${M}.${N}"                                         >> vdock
                                 echo "#SBATCH --output=V${M}.${N}.out"                                       >> vdock
                                 echo "#SBATCH --error=V${M}.${N}.err"                                        >> vdock
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                   >> vdock
                                 echo "touch ${target_dir}/Vina"                                              >> vdock
                                 echo "cp $MGLTOOLS/AD4_parameters.dat ./"                                    >> vdock
                                 echo "cp $WORKDIR/ligands_stage/ligand_${lig_index}.pdbqt ./"                >> vdock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_receptor4.py -r complex_$comp_index.pdb -o complex_${comp_index}.pdbqt"                                                                                                     >> vdock
                                 echo "$MGLBIN/pythonsh $MGLUTILS/prepare_gpf.py -l ligand_${lig_index}.pdbqt -r complex_${comp_index}.pdbqt"                                                                                                         >> vdock
                                 echo "sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index}" >> vdock
                                 echo "vina --cpu $threads --size_x 40 --size_y 40 --size_z 40 --config conf_$conf_index.txt --exhaustiveness ${exhaustiveness} --receptor complex_${comp_index}.pdbqt --ligand ligand_${lig_index}.pdbqt --out COMPLEX.pdbqt > log_${comp_index}"                                                                                                             >> vdock
                                 echo "if  [ -e COMPLEX.pdbqt ]"                                               >> vdock
                                 echo "then"                                                                   >> vdock
                                 echo "    obabel -ipdbqt COMPLEX.pdbqt -O $target_dir/complex_${comp_index}.pdb" >> vdock
                                 echo "    echo \`cat log_${comp_index} | head -39 | tail -1 | awk '{print \$2}'\` > $target_dir/log_${comp_index}"                                                                                                    >> vdock
                                 echo "else"                                                                   >> vdock
                                 echo "    echo ERROR > $target_dir/log_${comp_index}"                    >> vdock
                                 echo "fi"                                                                     >> vdock
                                 chmod u+x                                                                        vdock
                                 sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                                 ${job_submit} -Q                                                                 vdock
                                 sh $vini_dir/write_checkpoint ${ligand_number} ${I} ${J} ${L} ${M}    #write restart point
                             else                                             #using Amber
                                 cp $ROSETTA_TOOLS/amino_acids.py ./
                                 cp $ROSETTA_PUB/clean_pdb_keep_ligand.py ./
                                 #cp $vini_dir/flag_input_relax $vini_dir/flag_global_docking $vini_dir/docking.mac ./
                                 source $INSTALL/miniconda2/bin/activate
                                 python clean_pdb_keep_ligand.py complex_${comp_index}.pdb -ignorechain
                                 mv complex_${comp_index}.pdb_00.pdb complex_${comp_index}.pdb
                                 conda deactivate
                                 fasta_file=${vini_dir}/ligands/fasta_files/${drug}.fasta #set chains ID in ligand
                                 chains=`grep -c ">" ${fasta_file}`     
                                 #cp $vini_dir/flag_input_relax $vini_dir/flag_global_docking ./
                                 if  [ $chains -eq $ONES ]
                                 then
                                     java -jar $vini_dir/PDBChainNameSupstitutor-1.0-SNAPSHOT-shaded.jar ligand_${lig_index}.pdb A B
                                     mv ligand_${lig_index}.pdb_A_to_B.pdb ligand_${lig_index}.pdb
                                     sed -i -e "s/chains/B/" flag_global_docking
                                 else
                                     if  [ $chains -eq $TWO ]
                                     then
                                         java -jar $vini_dir/PDBChainNameSupstitutor-1.0-SNAPSHOT-shaded.jar ligand_${lig_index}.pdb B Z
                                         java -jar $vini_dir/PDBChainNameSupstitutor-1.0-SNAPSHOT-shaded.jar ligand_${lig_index}.pdb_B_to_Z.pdb A Q
                                         mv ligand_${lig_index}.pdb_B_to_Z.pdb_A_to_Q.pdb ligand_${lig_index}.pdb
                                         #sed -i -e "s/chains/BC/" flag_global_docking
                                     else
                                         sed -i -e "s/chains/BCDEFGHIJK/" flag_global_docking       #This for Alemtuzumab only
                                     fi
                                 fi
                                 rm -f *err *out *rst
                                 cp $vini_dir/equil.in $vini_dir/heat.in $vini_dir/density.in $vini_dir/min.in $vini_dir/prod.in ./
                                 cp $vini_dir/docking.mac ./
                                 cp $vini_dir/tleap.in $vini_dir/mmpbsa.in  ./

                                 cp complex_${comp_index}.pdb receptor.pdb
                                 cp ligand_${lig_index}.pdb ligand.pdb
                                 reduce -BUILD receptor.pdb > tmp ; mv tmp receptor.pdb
                                 reduce -BUILD ligand.pdb > tmp ; mv tmp ligand.pdb
                                 hex -batch receptor.pdb ligand.pdb < docking.mac > docking.log
                                 pdb4amber -i receptor.pdb -o tmp.pdb ; mv tmp.pdb receptor.pdb
                                 pdb4amber -i ligand.pdb -o tmp.pdb ; mv tmp.pdb ligand.pdb
                                 cp complex.pdb complex.orig
                                 pdb4amber -i complex.pdb -o tmp.pdb ; mv tmp.pdb complex.pdb
                                 sed -i -e "s#AMBERHOME#${AMBERHOME}#" tleap.in
                                 tleap -s -f tleap.in
                                 #  awk '/^TER/ && !done {done=1; next} 1' complex.pdb > tmp ; mv tmp complex.pdb

                                 ntasks=96
                                 echo "#!/bin/bash"                                                            > amber
                                 echo "#SBATCH --time="$walltime                                              >> amber
                                 echo "#SBATCH --account=$SLURMACCT"                                          >> amber
                                 echo "#SBATCH --partition="$partition                                        >> amber
                                 echo "#SBATCH --nodes=4"                                                     >> amber
                                 echo "#SBATCH --ntasks="$ntasks                                              >> amber
                                 echo "#SBATCH --tasks-per-node=24"                                           >> amber
                                 echo "#SBATCH --job-name=A${M}.${N}"                                         >> amber
                                 echo "#SBATCH --output=A${M}.${N}.out"                                       >> amber
                                 echo "#SBATCH --error=A${M}.${N}.err"                                        >> amber
                                 echo "#SBATCH --exclude=${excluded_nodes}"                                   >> amber

                                 echo "mpirun -np $ntasks sander.MPI -O -i min.in -o min.out -p COMP_solvated.prmtop -c COMP_solvated.inpcrd -r min.rst -ref COMP_solvated.inpcrd" >> amber
                                 echo "mpirun -np $ntasks sander.MPI -O -i heat.in -o heat.out -p COMP_solvated.prmtop -c min.rst -r heat.rst -x heat.mdcrd -ref min.rst"          >> amber
                                 echo "mpirun -np $ntasks sander.MPI -O -i density.in -o density.out -p COMP_solvated.prmtop -c heat.rst -r density.rst -x density.mdcrd -ref heat.rst" >> amber
                                 echo "mpirun -np $ntasks sander.MPI -O -i equil.in -o equil.out -p COMP_solvated.prmtop -c density.rst -r equil.rst -x equil.mdcrd"               >> amber

                                 echo "mpirun -np $ntasks sander.MPI -O -i prod.in -o prod.out -p COMP_solvated.prmtop -c equil.rst -r prod1.rst -x prod.mdcrd"                   >> amber

                                 echo "$AMBERHOME/bin/MMPBSA.py -O -i mmpbsa.in -o FINAL_RESULTS_MMPBSA.dat -sp COMP_solvated.prmtop -cp COMP.prmtop -rp REC.prmtop -lp LIG.prmtop -y *.mdcrd > progress.log" >> amber
                                 echo "if [ ! -e FINAL_RESULTS_MMPBSA.dat ]"                                         >> amber
                                 echo "then"                                                                         >> amber
                                 echo "        echo "ERROR" > $target_dir/log_${comp_index}"                         >> amber
                                 echo "else"                                                                         >> amber
                                 echo "    DG=\`grep DELTA FINAL_RESULTS_MMPBSA.dat | tail -1 | awk '{print \$5}'\`" >> amber
                                 echo "    echo \${DG} > $target_dir/log_${comp_index}"                              >> amber
                                 echo "    cp complex.orig $target_dir/complex_${comp_index}.pdb"                    >> amber
                                 echo "fi"                                                                           >> amber
                                 chmod u+x                                                                              amber         
                                 sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                                 ${job_submit} -Q                                                                       amber
                                 sh $vini_dir/write_checkpoint ${ligand_number} ${I} ${J} ${L} ${M}    #write restart point
                             fi
                         fi
                     fi
    	         done # end of 5th loop

                 sh $vini_dir/wait_until_jobs_finish

                 
                 cd $WORKDIR
                 echo ${target_dir} > target_dir

                 echo "Computing SLEM..."
                 echo ${therapy_level} > $WORKDIR/therapy_level    #input for the create_energy_binding_matrix.py script 
                 rm -f ${target_dir}/vec*
                 echo "#!/bin/bash"                                           > ${target_dir}/compute_SLEM
                 echo "#SBATCH --time="$walltime                             >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --account=$SLURMACCT"                         >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --partition="$partition                       >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --ntasks=1"                                   >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --cpus-per-task=1"                            >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --job-name=SLEM"                              >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --output=${target_dir}/compute_SLEM.out"      >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --output=${target_dir}/compute_SLEM.err"      >> ${target_dir}/compute_SLEM
                 echo "#SBATCH --exclude=${excluded_nodes}"                  >> ${target_dir}/compute_SLEM 
                 echo "module purge"                                         >> ${target_dir}/compute_SLEM
                 echo "WORKDIR=${WORKDIR}"                                   >> ${target_dir}/compute_SLEM
                 echo "INSTALL=${INSTALL}"                                   >> ${target_dir}/compute_SLEM
                 echo "source $INSTALL/miniconda3/bin/activate"              >> ${target_dir}/compute_SLEM
                 echo "conda activate env310"                                >> ${target_dir}/compute_SLEM
                 cat $vini_dir/create_vector                                 >> ${target_dir}/compute_SLEM
                 echo "ls ${target_dir}/log* > tmp"                          >> ${target_dir}/compute_SLEM
                 echo "complexes=\`wc -l < tmp\`"                            >> ${target_dir}/compute_SLEM
                 echo "echo \$complexes > complexes"                         >> ${target_dir}/compute_SLEM
                 echo "python3 $vini_dir/create_energy_binding_matrix.py"    >> ${target_dir}/compute_SLEM
                 echo "python3 $vini_dir/compute_eigenvalues.py -s $target_dir/EB_matrix -t $target_dir/eigenvalues" >> ${target_dir}/compute_SLEM
                 echo "conda deactivate"                                     >> ${target_dir}/compute_SLEM
                 cat $vini_dir/compute_SLEM                                  >> ${target_dir}/compute_SLEM
                 chmod u+x                                                      ${target_dir}/compute_SLEM
                 ${job_submit} -Q                                               ${target_dir}/compute_SLEM ${target_dir} ${WORKDIR} $M $L $J $I
                 sh $vini_dir/wait_until_jobs_finish
                 let ligand_number++
             done   #end of 4thloop
         done       #end of 3rd loop
    done            #end of 2nd loop
done                #end of 1st loop

sleep 4
sh $vini_dir/wait_until_jobs_finish

if  [ $cosmic == y ] ; then
    exp=exp
else
    exp=noexp
fi

cp $WORKDIR/SLEM_values $WORKDIR/${CANCER_PATHWAY}_results/SLEM_values_${cell_line}_thl${therapy_level}_${exp}

echo "Finalizing SLEM lists."
echo "#!/bin/bash"                                    > $WORKDIR/postproc
echo "#SBATCH --time="$walltime                      >> $WORKDIR/postproc
echo "#SBATCH --account=$SLURMACCT"                  >> $WORKDIR/postproc
echo "#SBATCH --partition="$partition                >> $WORKDIR/postproc
echo "#SBATCH --ntasks=1"                            >> $WORKDIR/postproc
echo "#SBATCH --cpus-per-task=1"                     >> $WORKDIR/postproc
echo "#SBATCH --job-name=postproc"                   >> $WORKDIR/postproc
echo "#SBATCH --output=$WORKDIR/postproc.out"        >> $WORKDIR/postproc
echo "#SBATCH --error=$WORKDIR/postproc.err"         >> $WORKDIR/postproc
echo "#SBATCH --exclude=${excluded_nodes}"           >> $WORKDIR/postproc
echo "WORKDIR=${WORKDIR}"                            >> $WORKDIR/postproc
cat $vini_dir/delete_SLEM_entries_with_equal_indices >> $WORKDIR/postproc  
cat $vini_dir/create_SLEM_named_list                 >> $WORKDIR/postproc
echo "if  [ $therapy_level -ne $ONES ]"              >> $WORKDIR/postproc
echo "then"                                          >> $WORKDIR/postproc
echo "    sh $vini_dir/create_SLEM_wings_list"       >> $WORKDIR/postproc
echo "    sh $vini_dir/create_SLEM_wings_named_list" >> $WORKDIR/postproc
echo "fi"                                            >> $WORKDIR/postproc
chmod u+x                                               $WORKDIR/postproc
$job_submit -Q                                          $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish

echo "Done. The results are in $WORKDIR/${CANCER_PATHWAY}_results directory."
