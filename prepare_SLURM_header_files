
cluster=`uname -n`
echo "Available SLURM partitions on" $cluster "are:"
sinfo

Vina=computes_thin; MD_prepare=computes_thin; MD_run=comp_gpu; ndx=computes_thin;
potential=computes_thin; polar=computes_thin; apolar=computes_thin; FBE=computes_thin

echo "The default mapping of Vini tasks on Bura partitions is:"
echo "Autodock Vina        --> computes_thin; Gromacs (MD_prepare)   --> comp_gpu"
echo "Gromacs (MD_run)     --> comp_gpu; Gromacs (create_index_file) --> comp_gpu"
echo "g_mmpbsa (potential) --> computes_thin; g_mmpbsa (polar)       --> computes_thin"
echo "g_mmpbsa (apolar)    --> computes_thin; g_mmpbsa (compute_FBE) --> computes_thin"

read -p "Accept (y/n)?" accept
if [ $accept == "n" ]
then
    read -p  "enter the name of cluster partition Autodock Vina will use:" Vina
    read -p  "enter the name of cluster partition Gromacs (MD_prepare) will use:" MD_prepare
    read -p  "enter the name of cluster partition Gromacs (MD_run) will use:" MD_run
    read -p  "enter the name of cluster partition Gromacs (create_index_file) will use:" ndx
    read -p  "enter the name of cluster partition g_mmpbsa (potential) will use:" potential
    read -p  "enter the name of cluster partition g_mmpbsa (polar) will use:" polar
    read -p  "enter the name of cluster partition g_mmpbsa (apolar) will use:" apolar
    read -p  "enter the name of cluster partition g_mmpbsa (compute_FBE) will use:" FBE
fi


echo "#! /bin/bash"                           > $WORKDIR/Vina       #prepare Vina header file
echo "#SBATCH --job-name=Vina"               >> $WORKDIR/Vina
echo "#SBATCH --output=Vina.out"             >> $WORKDIR/Vina
echo "#SBATCH --time=00:30:00"               >> $WORKDIR/Vina
echo "#SBATCH --ntasks-per-node=1"           >> $WORKDIR/Vina
echo "#SBATCH --cpus-per-task=3"             >> $WORKDIR/Vina
echo "#SBATCH --mem=8gb"                     >> $WORKDIR/Vina
echo "#SBATCH --partition="$Vina             >> $WORKDIR/Vina

echo "#! /bin/bash"                            > tmp  #prepare Gromacs header files
echo "#SBATCH --job-name=MD_prepare"          >> tmp
echo "#SBATCH --output=MD_prepare.out"        >> tmp
echo "#SBATCH --time=01:00:00"                >> tmp
echo "#SBATCH --ntasks-per-node=1"            >> tmp
echo "#SBATCH --cpus-per-task=1"              >> tmp
echo "#SBATCH --mem=4gb"                      >> tmp
echo "#SBATCH --partition="$MD_prepare        >> tmp
cat tmp > MD_prepare
chmod u+x MD_prepare
cat MD_prepare_script >> MD_prepare

echo "#! /bin/bash"                            > tmp
echo "#SBATCH --job-name=MD_run"              >> tmp
echo "#SBATCH --output=MD_run.out"            >> tmp
echo "#SBATCH --time=12:00:00"                >> tmp
echo "#SBATCH --nodes=1"                      >> tmp
echo "#SBATCH --ntasks-per-node=1"            >> tmp
echo "#SBATCH --cpus-per-task=4"              >> tmp
echo "#SBATCH --mem=32gb"                     >> tmp
echo "#SBATCH --partition="$MD_run            >> tmp
cat tmp > MD_run
chmod u+x MD_run
cat MD_run_script >> MD_run

echo "#! /bin/bash"                            > tmp
echo "#SBATCH --job-name=ndx"                 >> tmp
echo "#SBATCH --output=ndx.out"               >> tmp
echo "#SBATCH --time=12:10:00"                >> tmp
echo "#SBATCH --ntasks-per-node=1"            >> tmp
echo "#SBATCH --cpus-per-task=1"              >> tmp
echo "#SBATCH --mem=4gb"                      >> tmp
echo "#SBATCH --partition="$ndx               >> tmp
cat tmp > create_index_file
chmod u+x create_index_file
cat create_index_file_script >> create_index_file

echo "#! /bin/bash"                            > tmp  #prepare mmpbsa header files
echo "#SBATCH --job-name=potential"           >> tmp
echo "#SBATCH --output=potential.out"         >> tmp
echo "#SBATCH --time=24:00:00"                >> tmp
echo "#SBATCH --ntasks-per-node=1"            >> tmp
echo "#SBATCH --cpus-per-task=16"             >> tmp
echo "#SBATCH --mem=16gb"                     >> tmp
echo "#SBATCH --partition="$potential         >> tmp
echo "export OMP_NUM_THREADS=16"              >> tmp
echo "export APBS=/scratch/opt2/apbs-1.3/bin/apbs" >> tmp
cat tmp > g_mmpbsa_potential_energy
chmod u+x g_mmpbsa_potential_energy
cat g_mmpbsa_potential_energy_script >> g_mmpbsa_potential_energy

echo "#! /bin/bash"                            > tmp
echo "#SBATCH --job-name=apolar"              >> tmp
echo "#SBATCH --output=apolar.out"            >> tmp
echo "#SBATCH --time=24:00:00"                >> tmp
echo "#SBATCH --ntasks-per-node=1"            >> tmp
echo "#SBATCH --cpus-per-task=4"              >> tmp
echo "#SBATCH --mem=8gb"                      >> tmp
echo "#SBATCH --partition="$apolar            >> tmp
echo "export OMP_NUM_THREADS=4"               >> tmp
echo "export APBS=/scratch/opt2/apbs-1.3/bin/apbs" >> tmp
cat tmp > g_mmpbsa_apolar_energy
chmod u+x g_mmpbsa_apolar_energy
cat g_mmpbsa_apolar_energy_script >> g_mmpbsa_apolar_energy

echo "#! /bin/bash"                            > tmp
echo "#SBATCH --job-name=polar"               >> tmp
echo "#SBATCH --output=polar.out"             >> tmp
echo "#SBATCH --time=24:00:00"                >> tmp
echo "#SBATCH --nodes=1"                      >> tmp
echo "#SBATCH --ntasks-per-node=1"            >> tmp
echo "#SBATCH --cpus-per-task=16"             >> tmp
echo "#SBATCH --mem=24gb"                     >> tmp
echo "#SBATCH --partition="$polar             >> tmp
echo "export OMP_NUM_THREADS=16"              >> tmp
echo "export APBS=/scratch/opt2/apbs-1.3/bin/apbs" >> tmp
cat tmp > g_mmpbsa_polar_energy
chmod u+x g_mmpbsa_polar_energy
cat g_mmpbsa_polar_energy_script >> g_mmpbsa_polar_energy

echo "#! /bin/bash"                            > tmp
echo "#SBATCH --job-name=FBE_calc"            >> tmp
echo "#SBATCH --output=FBE_calc.out"          >> tmp
echo "#SBATCH --time=24:00:00"                >> tmp
echo "#SBATCH --ntasks-per-node=1"            >> tmp
echo "#SBATCH --cpus-per-task=1"              >> tmp
echo "#SBATCH --mem=4gb"                      >> tmp
echo "#SBATCH --partition="$FBE               >> tmp
echo "export OMP_NUM_THREADS=1"               >> tmp
cat tmp > compute_FBE
chmod u+x compute_FBE
cat compute_FBE_script >> compute_FBE
