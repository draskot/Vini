WORKDIR=`cat workdir`
ORGANISM=`cat $WORKDIR/ORGANISM`                    #getting the organism type from the main script
therapy_level=`cat $WORKDIR/therapy_level`          #Current therapy level received from Vini
max_therapy_level=`cat $WORKDIR/max_therapy_level`  #single or multidrug (2,3,4) cancer therapy
CANCER_TYPE=`cat $WORKDIR/cancer_type`              #getting the cancer type from the main script
CANCER_PATHWAY=$ORGANISM$CANCER_TYPE       #setting the cancer pathway
job_status=`cat $WORKDIR/job_status`                #single or multidrug (2,3,4) cancer therapy
job_submit=`cat $WORKDIR/job_submit`
user_name=$USER
TRUE=1
mkdir -p $WORKDIR/cache

max_jobs=`cat $WORKDIR/max_jobs` #maximum number of Vina jobs
MAX_NODES=`cat $WORKDIR/nodes`       #maximum number of compute nodes Vini can use concurrently
nr_ligands=`cat $WORKDIR/nr_ligands` 
nr_complexes=`cat $WORKDIR/nr_complexes`
NTOMP=`cat $WORKDIR/Gromacs_threads` ; export NTOMP #nr OMP threads (SGE) MD_run/MD_prepare scripts will use
export target_dir comp_index recline     #vars for (SGE) compute_FBE/Vina script
amber=`cat $WORKDIR/amber` 

data="_data"
a="_results"                               #Create directory store for results
PDB=.pdb
pdbqt=.pdbqt
NULL=0
DIR=$WORKDIR/$CANCER_TYPE$data 
lig_source=$WORKDIR

mkdir -p $WORKDIR/$CANCER_PATHWAY$a
cd $WORKDIR

> SLEM_values    #delete SLEM values from the previous run !!!

SECONDS=$NULL
elapsed_time=$NULL
elapsed_simulations=$NULL


L1=1; L2=1; L3=1; L4=1;                 #Initializing main loops
case $therapy_level in
     1) L4=$nr_ligands ;;
     2) L3=$nr_ligands; L4=$nr_ligands ;;
     3) L2=$nr_ligands; L3=$nr_ligands; L4=$nr_ligands ;;
     4) L1=$nr_ligands; L2=$nr_ligands; L3=$nr_ligands; L4=$nr_ligands ;;
esac

ligand_number=1                #initializing ligand index

for (( I=1; I<$((L1+1)); I++ )) #1st loop - 4th therapy level
do
    for (( J=1; J<$((L2+1)); J++ )) #2nd loop -3rd therapy level
    do
         for (( L=1; L<$((L3+1)); L++ )) #3rd loop -2nd thl
         do
             for (( M=1; M<$((L4+1)); M++ )) #4th loop - 1st thl
             do
                 printf -v m "%03d" $M ; lig_index=$m
                 case $therapy_level in
                     1) comp_source=$DIR;          target_dir=$DIR/$M ;;
                     2) comp_source=$DIR/$M;       target_dir=$DIR/$M/$L ;;
                     3) comp_source=$DIR/$M/$L;    target_dir=$DIR/$M/$L/$J ;;
                     4) comp_source=$DIR/$M/$L/$J; target_dir=$DIR/$M/$L/$J/$I ;;
                 esac
                 mkdir -p $comp_source $target_dir # nr. of target dirs equals nr. of ligands
                 for (( N=0; N<nr_complexes; N++ )) #5th loop
       	         do
                     printf -v n "%03d" $N ; comp_index=$n
                     conf_index=$comp_index ; log_index=$comp_index
                     cp $comp_source/complex_$comp_index.pdbqt $WORKDIR
                     line=`head -"$ligand_number" $WORKDIR/ligands_list | tail -1`
                     flag=`echo $line | awk -F','  '{print $2}'`
                     if  [ $flag == S ]  #if a small molecule, we are performing docking, else MD
                     then
                         echo "Vina" > $WORKDIR/MD_engine
                         mkdir -p $WORKDIR/$comp_index ; cd $WORKDIR/$comp_index ; rm -f * 
                         recline=$N ; let "recline++" #do not compute FBE if receptor is with F flag
                         line=`head -$recline $WORKDIR/receptors_contracted | tail -1`
                         flag=`echo $line | awk '{print $4}'`
                         if  [ $flag == F ]
                         then
                             printf "%.1f\n" -7.0 > $target_dir/log_$comp_index.txt
                         else
                             cp $MGLTOOLS/AD4_parameters.dat ./                                
                             cp $vini_dir/vina $vini_dir/autogrid4 ./                                         
                             cp $comp_source/complex_$comp_index.pdbqt ./                      
                             sh $vini_dir/create_Vina_config_file ${lig_index} ${comp_index} ${conf_index} ${comp_source} #create Vina config file                                                     
                             sh $vini_dir/prepare_Vina_complex ${therapy_level} ${comp_source} ${comp_index}
                             cat $WORKDIR/Vina > Vina_run
                             cp $WORKDIR/ligand_$lig_index.pdbqt ./ #get ligand pdbqt file
                             echo "$INSTALL_DIR/autodock_vina_1_1_2_linux_x86/bin/vina --size_x 40 --size_y 40 --size_z 40 --config $comp_source/conf_$conf_index.txt --num_modes 10 --energy_range 4 --receptor $comp_source/complex_$comp_index.pdbqt --ligand ligand_$lig_index.pdbqt --out $target_dir/complex_$comp_index.pdbqt --log $target_dir/log_$log_index.txt " >> Vina_run 
                             sh $vini_dir/jobs_control_script ${job_status} ${max_jobs}
                             $job_submit Vina_run    
                         fi
                         cd $WORKDIR
                     else
                         echo "Gromacs" > $WORKDIR/MD_engine
                         mkdir -p $WORKDIR/$comp_index ; cd $WORKDIR/$comp_index ; rm -f * #cleanup
                         recline=$N ; let "recline++" #do not compute FBE if receptor is with F flag
                         line=`head -$recline $WORKDIR/receptors_contracted | tail -1`
                         flag=`echo $line | awk '{print $4}'`
                         if  [ $flag == F ]
                         then
                             printf "%.1f\n" -7.0 > $target_dir/log_$comp_index.txt
                         else
                             #check if FBE for this complex has been already computed
                             line=`head -"$recline" $WORKDIR/receptors_contracted | tail -1`
                             receptor=`echo $line | awk '{print $3}'` 
                             already=`echo FBE for complex with $receptor is`
                             grep "$already" $WORKDIR/debuglog > tmp; nolines=`wc -l < tmp`
                             if [ $nolines -gt $NULL ]
                             then
                                  FBE_kcal_mol=`cat tmp | awk '{print $7}'`    
                                  echo ${FBE_kcal_mol} > ${target_dir}/log_${comp_index}.txt 
                             else

                                 if [ $amber -eq $NULL ]
                                 then #calculate protein-protein DG with g_mmpbsa
                                     cp $vini_dir/nodes_control_script ./ 
                                     cp $vini_dir/ions.mdp $vini_dir/md.mdp $vini_dir/minim.mdp ./
                                     cp $vini_dir/nvt.mdp $vini_dir/npt.mdp ./ 
                                     cp $vini_dir/wait_until_jobs_finish ./
                                     cp $vini_dir/polar.mdp $vini_dir/apolar_sasa.mdp $vini_dir/mmpbsa.mdp ./
                                     cp $vini_dir/pbsa.mdp $vini_dir/docking.mac ./ 
                                     cp $vini_dir/chimera_script $vini_dir/prep_prot_lig.py ./  
                                     #cp $vini_dir/create_pdbqt_complex_script ./
                                     cp $WORKDIR/MD_prepare $WORKDIR/MD_run $WORKDIR/create_index_file ./
                                     cp $WORKDIR/g_mmpbsa_potential_energy $WORKDIR/g_mmpbsa_polar_energy ./
                                     cp $WORKDIR/g_mmpbsa_apolar_energy $WORKDIR/compute_FBE  ./
                                     cut -c-66 $comp_source/complex_$comp_index$pdbqt > receptor.pdb
                                     cp $lig_source/ligand_$lig_index.pdb ./ligand.pdb #get ligand
                                     echo -n "Generating protein complex with Hex, please wait..." 
                                     hex -batch receptor.pdb ligand.pdb < docking.mac > docking.log ; echo "done."
                                     echo -n "Preparing protein complex with Chimera, please wait..."
                                     accession_code=complex ; ligand=BNZ 
                                     sh chimera_script ${accession_code} ${ligand}
                                     echo "done."
                                     if  [ -e protein_clean.pdb ]
                                     then
                                         mv protein_clean.pdb complex.pdb
                                     else
                                         mv complex_clean.pdb complex.pdb
                                     fi
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit MD_prepare ${NTOMP}
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit MD_run ${NTOMP}
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit create_index_file
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit g_mmpbsa_potential_energy
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit g_mmpbsa_polar_energy
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit g_mmpbsa_apolar_energy
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit compute_FBE ${target_dir} ${comp_index} ${recline}
                                     #cat $WORKDIR/Vina > create_pdbqt_complex
                                     #cat $vini_dir/create_pdbqt_complex_script >> create_pdbqt_complex
                                     #chmod u+x create_pdbqt_complex
                                     #sh nodes_control_script ${MAX_NODES} ; $job_submit create_pdbqt_complex ${target_dir} ${comp_index}
                                 else #calculate protein-protein DG with Amber
                                     cp $vini_dir/nodes_control_script $vini_dir/docking.mac ./
                                     cp $vini_dir/amber20/* $WORKDIR/sander ./
                                     cut -c-66 $comp_source/complex_$comp_index$pdbqt > receptor.pdb
                                     #cp $vini_dir/1AKI.pdb ./receptor.pdb #DELETE AFTER DEBUG!!!
                                     cp $lig_source/ligand_$lig_index.pdb ./ligand.pdb #get ligand
                                     grep -v HETATM receptor.pdb > tmp ; mv tmp receptor.pdb
                                     grep -v HETATM ligand.pdb > tmp ; mv tmp ligand.pdb
                                     STOREPATH=$PYTHONPATH #for pdb4amber                                    
                                     source /scratch/opt2/amber20/amber.sh
                                     export PYTHONPATH=$PYTHONPATH:$AMBERHOME/lib/python3.8/site-packages/pdb4amber-1.7.dev0-py3.8.egg/
                                     pdb4amber -i receptor.pdb -o tmp.pdb ; mv tmp.pdb receptor.pdb
                                     pdb4amber -i ligand.pdb -o tmp.pdb ; mv tmp.pdb ligand.pdb
                                     export PYTHONPATH=$STOREPATH

                                     echo -n "Generating protein complex with Hex, please wait..." 
                                     hex -batch receptor.pdb ligand.pdb < docking.mac > docking.log ; echo "done."
                                     cat $WORKDIR/Vina > create_pdbqt_complex #create pdbqt for the next run
                                     cat $vini_dir/create_pdbqt_complex_script >> create_pdbqt_complex
                                     chmod u+x create_pdbqt_complex
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit create_pdbqt_complex ${target_dir} ${comp_index}

                                     reduce -Trim receptor.pdb > tmp ; mv tmp receptor.pdb
                                     reduce -Trim ligand.pdb > tmp ; mv tmp ligand.pdb
                                     reduce -Trim complex.pdb > tmp ; mv tmp complex.pdb
                                     tleap -s -f tleap.in
                                     sh nodes_control_script ${MAX_NODES} ; $job_submit sander
                                 fi
                             fi
                        fi
                        cd $WORKDIR
                     fi
    	         done # end of 5th loop
                 echo "Waiting for" $USER "jobs to finish..."
                 sh $vini_dir/wait_until_jobs_finish
                 let ligand_number++
                 > $target_dir/vec                               #initialize affinity vector
                 MD_engine=`cat $WORKDIR/MD_engine`
                 if [ $MD_engine == Gromacs ]
                 then
                     ls $target_dir/log* > temp_buf
                     nologs=`wc -l < temp_buf`
                     for (( N=0; N<nologs; N++ ))
                     do
                         printf -v n "%03d" $N
                         cat $target_dir/log_$n.txt  >> $target_dir/vec
                     done
                 else
                     m=0  #creating affinity vector                                          
                     for (( N=0; N<nr_complexes; N++ )) 
       	             do
                         let "m++"                                   #checking flag value
                         line=`head -$m $WORKDIR/receptors_contracted | tail -1`            
                         flag=`echo $line | awk '{print $4}'`
                         if  [ $flag == F ] #or complex was not created
                         then
                             printf "%.1f\n" -7.0 >> $target_dir/vec 
                         else
                             printf -v n "%03d" $N ; log_index=$n #compute mean for 10 Vina num_modes
                             sum=0             
                             num_modes=10  
                             for (( lineno=28; lineno<38; lineno++ ))
                             do
                                 affinity_value=`head -"$lineno" $target_dir/log_$log_index.txt | tail -1`
                                 affinity_value=`echo $affinity_value | awk '{print $2}'`
                                 sum=`echo $sum $affinity_value | awk '{print $1 + $2}'`
                             done
                             echo "$sum $num_modes" | awk '{printf "%.9f \n", $1/$2}' >> $target_dir/vec
                         fi
                     done
                 fi
                 case $therapy_level in       #estimating computational time left
                     1) total_simulations=$(( $nr_complexes * $nr_ligands )) ;;
                     2) total_simulations=$(( $nr_complexes * $nr_ligands * $nr_ligands )) ;;
                     3) total_simulations=$(( $nr_complexes * $nr_ligands * $nr_ligands * $nr_ligands )) ;;
                     4) total_simulations=$(( $nr_complexes * $nr_ligands * $nr_ligands * $nr_ligands * $nr_ligands )) ;;
                 esac
                 elapsedseconds=$SECONDS
                 echo "elapsed seconds for Vina jobs:" $elapsedseconds
                 SECONDS=0
                 elapsed_time=`echo ${elapsed_time} ${elapsedseconds} | awk '{printf "%.9f \n", $1 + $2}'`
                 elapsed_simulations=`echo $elapsed_simulations $nr_complexes | awk '{print $1 + $2}'`
                 simulations_left=`echo $total_simulations $elapsed_simulations | awk '{print $1 - $2}'`
                 avg_simulation_time=`echo "$elapsed_time $elapsed_simulations" | awk '{printf "%.9f \n", $1/$2}'`
                 time_left=`echo "$avg_simulation_time $simulations_left" | awk '{printf "%9f \n", $1 * $2}'`
                 time=`echo $time_left | awk '{print int($1)}'`  #rounding
                 echo $elapsed_simulations "simulations performed." $simulations_left "simulations left." "Estimated  remaining time [sec]:" $time
                 sh $vini_dir/update_affinity_vec_with_genex_values ${target_dir}
                 echo $target_dir > target_dir
                 STORE1=$PYTHONPATH ; unset PYTHONPATH  #create EB matrix and calculate SLEM
                 eval "$($vini_dir/miniconda3/bin/conda shell.bash hook)"
                 conda activate Vini
                 python $vini_dir/create_energy_binding_matrix.py
                 python $vini_dir/compute_eigenvalues.py -s $target_dir/EB_matrix -t $target_dir/E
                 conda deactivate
                 export PYTHONPATH=$STORE1
                 eigenvalue=`cat $target_dir/E | awk '{print $2}'`
                 SLEM=`echo $eigenvalue | tr -d "(),-" | cut -f1 -d"+"`

                 case $therapy_level in
                     1) printf "%s%s%s%s\n" "SLEM_" "$M" " " "$SLEM" >> $WORKDIR/SLEM_values ;; #th=1
                     2) printf "%s%s%s%s%s%s\n" "SLEM_" "$M" "." "$L" " " "$SLEM" >> $WORKDIR/SLEM_values ;; #th=2
                     3) printf "%s%s%s%s%s%s%s%s\n" "SLEM_" "$M" "." "$L" "." "$J" " " "$SLEM" >> $WORKDIR/SLEM_values ;; #th=3
                     4) printf "%s%s%s%s%s%s%s%s%s%s\n" "SLEM_" "$M" "." "$L" "." "$J" "." "$I" " " "$SLEM" >> $WORKDIR/SLEM_values ;; #th=4
                 esac
                 rm -f target_dir stats 
             done   #end of 4thloop
         done       #end of 3rd loop
    done            #end of 2nd loop
done                #end of 1st loop

cp SLEM_values ./$CANCER_PATHWAY$a/SLEM_values_thl$therapy_level  

echo -n "deleting SLEM entries with equal indices, please wait..."
cat $WORKDIR/Vina > $WORKDIR/postproc                                #delete SLEM entries with equal indices
cat $vini_dir/delete_SLEM_entries_with_equal_indices >> $WORKDIR/postproc  
chmod u+x postproc ; $job_submit $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish


echo -n "creating SLEM named list, please wait..."
cat $WORKDIR/Vina > $WORKDIR/postproc                                        #create named SLEM list
cat $vini_dir/create_SLEM_named_list >> $WORKDIR/postproc
chmod u+x postproc ; $job_submit $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish

echo -n "creating SLEM wings list, please wait..."
cat $WORKDIR/Vina > $WORKDIR/postproc                                        #create SLEM wings list
cat $vini_dir/create_SLEM_wings_list >> $WORKDIR/postproc
chmod u+x postproc ; $job_submit $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish

echo -n "creating SLEM wings named list, please wait..."
cat $WORKDIR/Vina > $WORKDIR/postproc                                        #create SLEM wings named list
cat $vini_dir/create_SLEM_wings_named_list >> $WORKDIR/postproc
chmod u+x postproc ; $job_submit $WORKDIR/postproc
sh $vini_dir/wait_until_jobs_finish

echo $therapy_level > $WORKDIR/computed_therapy_level
echo $CANCER_TYPE > $WORKDIR/computed_cancer_type
echo "done. The results are in " $WORKDIR/$CANCER_PATHWAY$a "directory."

touch $WORKDIR/END    #Signal to Vini
