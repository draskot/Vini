#Using https://web.expasy.org/translate/ tool for nucleotide to aminoacids sequence translation

cell_line=$1

prediction_model=`cat $WORKDIR/prediction_model`
cpus=`cat $WORKDIR/AlphaFold_cpus`
mem=`cat $WORKDIR/AlphaFold_mem`
partition=`cat  $WORKDIR/AlphaFold_partition`
base=`cat $WORKDIR/AlphaFold_base`
model=`cat $WORKDIR/AlphaFold_model`

SEQDIR=$vini_dir/database/genes/sequences/

echo "brakepoint" ; sleep 1000

echo -n "Translating nucleotide sequences to aminoacid sequences, please wait..." 
rm -f $vini_dir/database/genes/sequences/*csv

ls $vini_dir/database/genes/sequences/*fasta > $WORKDIR/tmp 2>/dev/null

while read -r line              #DNA --> protein sequence translation
do
    uniprot_id=`basename ${line} .fasta`
    dnaseq=`cat $line`
    wget -O $SEQDIR/${uniprot_id}.frame --post-data="dna_sequence=${dnaseq}&output_format=fasta" -q  https://web.expasy.org/cgi-bin/translate/dna2aa.cgi
    rm $SEQDIR/${uniprot_id}.fasta
    echo -n "."
done < $WORKDIR/tmp
echo "done."

python find_longest_frame.py --input-dir $SEQDIR #Finding longest ORFs (Open Reading Frames)

rm -f $vini_dir/database/genes/sequences/*frame
ls $SEQDIR > seqnames             #rename proteins to include cell line name

ls $vini_dir/database/genes/sequences/*fasta > $WORKDIR/tmp 2>/dev/null
while read -r line
do
    FILENAME=`basename "$line"`
    BASE=`basename -s .fasta $SEQDIR$FILENAME`
    PROTNAME=${BASE}-${cell_line}.fasta
    mv $SEQDIR$FILENAME $SEQDIR$PROTNAME
done < $WORKDIR/tmp

> tmp                            #create file with wild gene names
while read -r line
do
    suffix=".fasta";
    string=${line%$suffix};
    echo $string >> tmp
done < seqnames
mv tmp wild

> tmp
ls $SEQDIR > mutated          #create file with mutated gene names
while read -r line
do
    suffix=".fasta";
    string=${line%$suffix};
    echo $string >> tmp
done < mutated
mv tmp mutated

paste -d' ' wild mutated > combo

while read -r line #replacing wild genes  with mutated receptors_contracted file
do
    wild=`echo $line | awk '{print $1}'`
    mutated=`echo $line | awk '{print $2}'`
    sed -i "s/$wild/$mutated/" $WORKDIR/receptors_contracted
done < combo


while read -r line
do
    if [ ! -e $vini_dir/database/genes/pdb_files/${line}.pdb ]
    then
        if  [ -e $vini_dir/database/NCI-60_cell_lines/${cell_line}/mutations/${line}.pdb ]
        then 
            cp $vini_dir/database/NCI-60_cell_lines/${cell_line}/mutations/${line}.pdb $vini_dir/database/genes/pdb_files
        else
            fasta_file=$vini_dir/database/genes/sequences/${line}.fasta
            if  [ ${prediction_model} == A ]
            then
                sh $vini_dir/predict_with_AlphaFold ${cpus} ${mem} ${partition} ${base} ${model} ${fasta_file}
            else
                echo "Trying to predict" mutated $line "structure with SWISS-MODEL."
                sh $vini_dir/predict_protein_structure_with_swiss_model ${fasta_file}
                cp $vini_dir/database/genes/pdb_files/${line}.pdb $vini_dir/database/NCI-60_cell_lines/${cell_line}/mutations
            fi
        fi
    fi
done < mutated

sh $vini_dir/wait_until_jobs_finish

if  [ ${prediction_model} == A ]
then
    while read -r line
    do
        uniprot_id=$line 
        cp $WORKDIR/${uniprot_id}/ranked_0.pdb $vini_dir/database/genes/pdb_files/${uniprot_id}.pdb
        cp $vini_dir/database/genes/pdb_files/${line}.pdb $vini_dir/database/NCI-60_cell_lines/${cell_line}/mutations
    done < mutated
fi

rm -f wild mutated combo seqnames #cleanup
