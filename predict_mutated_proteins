#Using https://web.expasy.org/translate/ tool for nucleotide to aminoacids sequence translation

cell_line=`cat $WORKDIR/cell_line`

prediction_model=`cat $WORKDIR/prediction_model`
if [ $prediction_model == A ]
then
    partition=`cat  $WORKDIR/AlphaFold_partition`      #Define AlphaFold parameters
    if [ $partition == cpu ]
    then
        cpus=`cat $WORKDIR/AlphaFold_cpus`
    else
        cpus=`cat $WORKDIR/AlphaFold_gpus`
    fi
    mem=`cat $WORKDIR/AlphaFold_mem`
    base=`cat $WORKDIR/AlphaFold_base`
    model=monomer
fi
SEQDIR=$vini_dir/genes/sequences/
echo -n "Translating nucleotide sequences to aminoacid sequences, please wait..."
rm -f $vini_dir/genes/sequences/*csv
> $WORKDIR/mutated #create file with mutated gene names
> $WORKDIR/combo
ls $vini_dir/genes/sequences/*fasta > $WORKDIR/tmp 2>/dev/null
while read -r line              #DNA --> protein sequence translation
do
    uniprot_id=`basename ${line} .fasta`
    uniprot_id=${uniprot_id//_mutated/}
    mutated_gene_name=${uniprot_id}-${cell_line}

    echo $mutated_gene_name >> $WORKDIR/mutated
    echo $uniprot_id $mutated_gene_name >> $WORKDIR/combo
    dnaseq=`cat $line`

    wget -O $SEQDIR${uniprot_id}_mutated.frame --post-data="dna_sequence=${dnaseq}&output_format=fasta" -q  https://web.expasy.org/cgi-bin/translate/dna2aa.cgi
    echo -n "."
done < $WORKDIR/tmp
echo "done."

echo -n "Activating miniconda3 environment..."
source $INSTALL/miniconda3/bin/activate
conda activate env310
echo "done."
python find_longest_frame.py --input-dir $SEQDIR #Finding longest ORFs (Open Reading Frames)
conda deactivate

while read -r line #replacing wild genes with mutated in receptors_contracted file
do
    wild=`echo $line | awk '{print $1}'`
    mutated=${wild}-${cell_line}
    cp $SEQDIR/${wild}_mutated.fasta $SEQDIR/${wild}-${cell_line}.fasta
    sed -i "s/$wild/$mutated/" $WORKDIR/receptors_contracted
done < $WORKDIR/combo

while read -r line
do
    if  [ -e $vini_dir/database/genes/pdb_files/${line}.pdb ]
    then
        echo "The structure for mutated ${uniprot_id} exist in database, no need for prediction"
    else
        echo "Trying to predict the structure for mutated ${uniprot_id}."
        uniprot_id=`echo $line | cut -f1 -d"-"`
        gene=`grep ${uniprot_id} ${vini_dir}/genes/cosmic_ids.csv | head -1`     #add header line
        gene=`echo $gene | awk -F','  '{print $2}'`
        echo ">sp|${line}|mutated gene ${gene} OS=Homo sapiens OX=9606 GN=${gene} PE=1 SV=4" > $WORKDIR/tmp
        grep - $vini_dir/genes/sequences/${line}.fasta > hyphen
        if  [ -s hyphen ]    #remove hiphen if exists in fasta sequence
        then
            cat $vini_dir/genes/sequences/${line}.fasta | tr -d - >> $WORKDIR/tmp
            rm hyphen
        else
            cat $vini_dir/genes/sequences/${line}.fasta >> $WORKDIR/tmp
        fi
        mv $WORKDIR/tmp $vini_dir/genes/sequences/${line}.fasta
        sed -i -e "s/\r//g"  $vini_dir/genes/sequences/${line}.fasta #remove ^M from fasta sequence
        fasta_file=$vini_dir/genes/sequences/${line}.fasta
        if  [ -e $vini_dir/database/NCI-60_cell_lines/${cell_line}/mutations/${line}.pdb ]
        then
            cp $vini_dir/database/NCI-60_cell_lines/${cell_line}/mutations/${line}.pdb $vini_dir/database/genes/pdb_files
        else
            if  [ ${prediction_model} == A ]
            then
                echo "Predicting mutated $line structure with AlphaFold."
                sh $vini_dir/predict_with_AlphaFold ${cpus} ${mem} ${partition} ${base} ${model} ${fasta_file}
            else
                echo "Predicting mutated $line structure with SWISS-MODEL."
                sh $vini_dir/predict_protein_structure_with_swiss_model ${fasta_file}
                cp $vini_dir/database/genes/pdb_files/${line}.pdb $vini_dir/database/NCI-60_cell_lines/${cell_line}/mutations
            fi
        fi
    fi
done < $WORKDIR/mutated

if  [[ ${prediction_model} == A ]] && [[ -e $WORKDIR/mutated ]]
then
    sh $vini_dir/wait_until_jobs_finish #wait and then copy gene structures if predicted with AlphaFold
    while read -r line
    do
        if  [ ! -e $vini_dir/database/genes/pdb_files/${line}.pdb ]
        then
            cp $WORKDIR/${uniprot_id}/ranked_0.pdb $vini_dir/database/genes/pdb_files/${line}.pdb
        fi
    done < $WORKDIR/mutated
    rm $WORKDIR/mutated
fi
